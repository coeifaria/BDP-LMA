--- SCRIPT: 01parameters_bdp.R ---

#```{r formatting1_cmvl_members, chunk_progress=TRUE}
library(tidyverse)
library(readxl)
library(lubridate)
library(extrafont)
library(flextable)
library(openxlsx)
library(officer)
library(xfun)
#library(markdown) # Keep loaded for potential markdown rendering later


#library(webshot)

#require xfun library

#getwd()

# Load parameters from parameters.txt file and assign to variables
# Specify the path to your parameters.txt file
parameters_file <- "parameters.txt"

# Read the file into a character vector
lines <- readLines(parameters_file)

# Remove any empty lines
lines <- lines[lines != ""]

# Initialize a list to hold parameters
params <- list()

# Loop over each line and parse the parameter name and value
for (line in lines) {
  # Split the line at the first '=' character
  split_line <- strsplit(line, "=", fixed = TRUE)[[1]]
  if (length(split_line) >= 2) {
    # Get the parameter name and value
    name <- split_line[1]
    value <- paste(split_line[-1], collapse = "=")  # In case value contains '='
    # Trim any whitespace
    name <- trimws(name)
    value <- trimws(value)
    # Add to the params list
    params[[name]] <- value
  }
}

# Assign the parameters to variables in the global environment
list2env(params, envir = .GlobalEnv)

objective <- params$objective
scv_counties <- c("Fresno", "Inyo", "Kern", "Kings", "Madera", "Mono", "Tulare")
ncv_counties <- c("Amador", "Alpine", "Calaveras", "Mariposa", "Merced", "San Joaquin", "Stanislaus", "Tuolumne")
#Inyo Mono Amador Alpine Calveras Mariposa

scv_colleges <- c("Madera", "Fresno", "Clovis", "Reedley", "Bakersfield", "Cerro Coso", "Porterville", "Sequoias", "Taft", "Lemoore", "Coalinga")
ncv_colleges <- c("San Joaquin Delta", "Columbia", "Modesto", "Merced")

# Create a dataframe
colleges_df <- data.frame(
  College = c(scv_colleges, ncv_colleges),
  FullName = c(
    "Madera Community College", "Fresno City College", "Clovis Community College", "Reedley College",
    "Bakersfield College", "Cerro Coso Community College", "Porterville College",
    "College of the Sequoias", "Taft College", "Lemoore College", "Coalinga College",
    "San Joaquin Delta College", "Columbia College", "Modesto Junior College", "Merced College"
  ),
  District = c(
    "State Center", "State Center", "State Center", "State Center",
    "Kern", "Kern", "Kern",
    "Sequoias", "West Kern",
    "West Hills", "West Hills",
    "San Joaquin Delta", "Yosemite", "Yosemite", "Merced"
  ),
  DistrictFullName = c(
    "State Center Community College District", "State Center Community College District",
    "State Center Community College District", "State Center Community College District",
    "Kern Community College District", "Kern Community College District", "Kern Community College District",
    "Sequoias Community College District", "West Kern Community College District",
    "West Hills Community College District", "West Hills Community College District",
    "San Joaquin Delta Community College District", "Yosemite Community College District",
    "Yosemite Community College District", "Merced Community College District"
  ),
  DistrictAcronym = c(
    "SCCCD", "SCCCD", "SCCCD", "SCCCD",
    "KCCD", "KCCD", "KCCD",
    "SCCD", "WKCCD",
    "WHCCD", "WHCCD",
    "SJDCCD", "YCCD", "YCCD", "MCCD"
  ),
  County = c(
    "Madera", "Fresno", "Fresno", "Fresno",
    "Kern", "Kern", "Tulare",
    "Tulare", "Kern",
    "Kings", "Fresno",
    "San Joaquin", "Tuolumne", "Stanislaus", "Merced"
  ),
  Classification = c(
    rep("South", length(scv_colleges)),
    rep("North", length(ncv_colleges))
  )
)

requesting_college <- if (params[["requesting_college"]] == "Cerro") {
  requesting_college <- "Cerro Coso"
} else if (str_detect(params[["requesting_college"]], "^San" )) {
  requesting_college <- "San Joaquin Delta"
} else {
  requesting_college <- unique(colleges_df[colleges_df$College==params[["requesting_college"]], "FullName"])
}

two_or_more_soc <- str_split(params$SOC, pattern = ",", simplify = TRUE) %>% length()


--------------------------------------------------

--- SCRIPT: 02parameter_assignments_bdp.R ---

#```{r formatting0_notes, chunk_progress=TRUE}

data_path <- "LMA-Data"

TOP <- str_squish(str_split(params[["TOP"]], ",", simplify = T))
TOP_supplementary <- str_squish(str_split(params[["TOP_supplementary"]], ",", simplify = T))
CIP <- str_squish(str_split(params[["CIP"]], ",", simplify = T))
SOC <- str_squish(str_split(params[["SOC"]], ",", simplify = T))

crosswalk <- list.files(pattern = "Crosswalk")

# Function to rename columns based on regex patterns
rename_columns <- function(data) {
  data %>%
    rename_with(
      ~ case_when(
        # Rename TOP Code columns
        str_detect(., regex("TOP.*Code", ignore_case = TRUE)) ~ "TOP Code",
        str_detect(., regex("TOP.*Title", ignore_case = TRUE)) ~ "TOP Code Title",

        # Rename CIP columns
        str_detect(., regex("CIP.*Code", ignore_case = TRUE)) ~ "CIP Code",
        str_detect(., regex("CIP.*Title", ignore_case = TRUE)) ~ "CIP Title",

        # Rename SOC columns
        str_detect(., regex("SOC.*Code", ignore_case = TRUE)) ~ "SOC Code",
        str_detect(., regex("SOC.*Title", ignore_case = TRUE)) ~ "SOC Title",

        # Keep original column name if no match
        TRUE ~ .
      )
    )
}

TOP_CIP_SOC_Current_original <- readxl::read_excel(
  #path = data_path,
  path = crosswalk,
  sheet = "TOP-CIP-SOC"
)

# Apply the renaming function
TOP_CIP_SOC_Current <- rename_columns(TOP_CIP_SOC_Current_original) %>%
  filter(`TOP Code` %in% TOP) %>% # This is the original method that operated under the assumption that TOP and CIP codes will be perfectly aligned
  filter(`CIP Code` %in% paste(str_split(CIP, pattern = ",", simplify = T), sep = ","))

TOP_CIP_SOC_Current_TOP_or_CIP <- rename_columns(TOP_CIP_SOC_Current_original) %>%
  filter((`TOP Code` %in% TOP) | (`CIP Code` %in% paste(str_split(CIP, pattern = ",", simplify = T), sep = ",")))

TOP_CIP_SOC_Current_supplementary <- readxl::read_excel(
  crosswalk,
  sheet = "TOP-CIP-SOC") %>%
  rename_columns() %>%
  #filter(`TOP Code` %in% str_remove_all(TOP_supplementary, "\\.") |
  filter(`TOP Code` %in% TOP_supplementary | `CIP Code` %in% paste(str_split(CIP, pattern = ",", simplify = T), sep = ","))

if(nrow(TOP_CIP_SOC_Current)==0) {
  TOP_CIP_SOC_Current <- TOP_CIP_SOC_Current_TOP_or_CIP
  TOP_AND_OR_CIP_MATCHING <- "TOP and CIP do not inner join"
} else {
  TOP_CIP_SOC_Current <- TOP_CIP_SOC_Current_TOP_or_CIP
  TOP_AND_OR_CIP_MATCHING <- "TOP and CIP match"
}

top_code_title <- rename_columns(TOP_CIP_SOC_Current_original) %>%
  filter(`TOP Code` %in% TOP) %>%
  select(`TOP Code`, `TOP Code Title`, `CIP Title`, `SOC Code`, `SOC Title`) %>%
  pull(`TOP Code Title`) %>%
  unique()

cip_titles <-
  rename_columns(TOP_CIP_SOC_Current_original) %>%
  filter(`CIP Code` %in% CIP) %>%
  select(`CIP Code`, `CIP Title`, `SOC Code`, `SOC Title`) %>%
  pull(`CIP Title`) %>%
  unique()

CIP_titles_code_supplementary <- rename_columns(TOP_CIP_SOC_Current_original) %>%
  filter(`CIP Code` %in% CIP) %>%
  mutate(CIP_title = paste0(`CIP Code`, '-', `CIP Title`)) %>%
  pull(CIP_title) %>%
  unique()

average_wage <- function(reg){
  round(sum(reg$`Avg. Annual Openings` * reg$`Avg. Hourly Earnings`)/sum(reg$`Avg. Annual Openings`),2)
}


--------------------------------------------------

--- SCRIPT: 03officeR_setup_bdp.R ---

#Sys.setenv(CHROMOTE_CHROME = "C:/Users/if001/AppData/Local/Google/Chrome/Application/chrome.exe")
#font_import(pattern = "Segoe UI")
#H0_color <- "#549E39"
H0_color <- "#000000"

#H1_color <- "#0989B1"
H1_color <- "#0F4761"
#H1_color <- "#0E4660"
#H2_color <- "#4AB5C4"
H2_color <- "#008985"

exhibit_header_color <- "#029676"
header1_color <- "#4AB5C4"
changed_color_line <- "#bed62f"

#table1_header_color <- "#E5EBB0"
table1_header_color <- "#126877"

#table_header_fontcolor <- "#455F51"
table_header_fontcolor <- "#FFFFFF"


table2_header_color <- "#d9e288"
table_bottom_sum_color <- "#4AB5C4"

solid_bar_graph_color <- "#549E39"
our_names <- "#3E762A"
total_bar_color <- "#AAAAA9"

table_banding_even <- "#FFFFFF"
table_banding_odd <- "#D3D4D3"

#border_settings <- fp_border(color = "#A6A6A6", width = 1)
border_settings <- fp_border(color = "#2EAA7C", width = 1)

border_settings_v2 <- fp_border(color = "#FFFFFF", width = 1)

H0 <- fp_text(font.size = 22, color = H0_color, font.family = "Segoe UI", bold = T)
H0_1 <- fp_text(font.size = 18, color = H0_color, font.family = "Segoe UI", bold = F)

H1            <- fp_text(font.size = 20, color = H1_color, font.family = "Segoe UI")
H1_italicized <- fp_text(font.size = 20, color = H1_color, font.family = "Segoe UI", italic = T)

H2            <- fp_text(font.size = 16, color = H1_color, font.family = "Segoe UI")
H2_italicized <- fp_text(font.size = 16, color = H1_color, font.family = "Segoe UI", italic = T)

H3            <- fp_text(font.size = 13, color = H1_color, font.family = "Segoe UI")
H3_italicized <- fp_text(font.size = 13, color = H1_color, font.family = "Segoe UI", italic = T)

#H3 <- fp_text(font.size = 14, color = exhibit_header_color, font.family = "Segoe UI")
S1 <- fp_text(font.size = 14, color = "#455F51", font.family = "Segoe UI")
body_text_style <- fp_text(font.size = 12, font.family = "Segoe UI")
body_text_style_bold <-fp_text(font.size = 12, font.family = "Segoe UI", bold = TRUE)
body_text_style_italic <-fp_text(font.size = 12, font.family = "Segoe UI", italic = TRUE)

body_text_style_related_occupations <- body_text_style
#body_text_style_related_occupations <- body_text_style_italic
body_text_style_italicbold <-fp_text(font.size = 12, font.family = "Segoe UI", italic = TRUE, bold = TRUE)
#fp_p_justify <- fp_par(text.align = "justify")

text_date <- format(Sys.Date(), "%B %Y")

# Define text styles
#body_text_outro_style <- fp_text(font.size = 13, color = "#000000", font.family = "Segoe UI")
#body_text_outro_style1 <- fp_text(font.size = 12, font.family = "Segoe UI")

highlighted_text <- fp_text(
  font.size = 11,
  font.family = "Segoe UI",
  color = "darkgrey"
  #shading.color = "red"
)

highlighted_text <- body_text_style


--------------------------------------------------

--- SCRIPT: 04file_loading_bdp.R ---

# List files matching the criteria

file_path <- file.path(getwd(), "..", "data")
#orignal_wd <- "../LMA-Data"
orignal_wd <- "LMA-Data"
#setwd(orignal_wd)
xls_files <- list.files("../data", pattern = "\\.xls$")
xlsx_files <- list.files("../data", pattern = "\\.xlsx")

if (length(xls_files) > 0 & length(xlsx_files)==0){

  source_file <- "convert.ps1"
  destination_file <- "../convert.ps1" # One directory up from R's current working directory
  source_path_full <- normalizePath(source_file, winslash="\\", mustWork=TRUE)
  destination_path_full <- normalizePath(destination_file, winslash="\\", mustWork=FALSE) # Destination might not exist yet
  # Path to the PowerShell script that performs the move
  move_ps_script <- normalizePath("move_convert_script.ps1", winslash="\\", mustWork=TRUE)

  system2(
    "powershell.exe",
    args = c(
      "-NoProfile",
      "-ExecutionPolicy", "Bypass",
      "-File", paste0('"', move_ps_script, '"'),
      "-SourcePath", paste0('"', source_path_full, '"'),
      "-DestinationPath", paste0('"', destination_path_full, '"')
    ),
    stdout = TRUE, # Capture output for debugging
    stderr = TRUE, # Capture errors for debugging
    wait = TRUE
  )
  setwd("../")
  setwd("data")
  print(getwd())
  output <- system2(
    "powershell.exe",
    args = c("-NoProfile", "-ExecutionPolicy", "Bypass", "-File", "../convert.ps1"),
    stdout = TRUE, # Capture standard output
    stderr = TRUE # Capture standard error
  )
  cat(output)
  print(list.files())
  setwd("../")
  #setwd("../LMA-Data")
  setwd("LMA-Data")
  print(getwd())
} else {
  print(".xlsx files present")
}

demand_hires <- list.files(
  path = file_path,  # Assuming the files are in a "data" folder
  pattern = "^Occupation.*?(CVML|California).*\\.xlsx$",
  full.names = T,
  ignore.case = TRUE
)

find_problematic_columns <- function(df, pattern) {
  cols_with_issues <- vector("logical", length(names(df)))
  for (l in seq_along(names(df))) {
    cols_with_issues[l] <- any(str_detect(df[[l]], pattern))
  }
  return(na.omit(names(df)[cols_with_issues]))
}

soc_2018_definitions <- read_excel("soc_2018_definitions.xlsx",
                                   sheet = "2018 SOC", skip = 2)

# Step 2: Fix "<10" values
fix_under10 <- function(df, col_name) {
  row <- which(str_detect(df[[col_name]], "<10"))

  # Replace "<10" with "0"
  df[row, col_name] <- "0"

  # Convert the column to numeric
  df[[col_name]] <- as.numeric(df[[col_name]]) %>% round()

  # Extrapolate missing values
  df[[col_name]][row] <- last(df[[col_name]]) - sum(df[[col_name]][1:(nrow(df) - 1)])

  return(df)
}

# Step 3: Handle "Insf. Data"
fix_insf_data <- function(df, col_name, col_index) {
  rows <- which(str_detect(df[[col_name]], "Insf. Data"))

  for (row in rows) {
    if (col_index == 5) {
      # Calculate "2023 - 2028 Change"
      df[row, col_name] <- as.character(
        as.numeric(df[[4]][row]) - as.numeric(df[[3]][row])  # 2028 Jobs...4 - 2023 Jobs...3
      )
    } else if (col_index == 6) {
      # Calculate "2023 - 2028 % Change"
      df[row, col_name] <- as.character(
        round((as.numeric(df[[4]][row]) - as.numeric(df[[3]][row])) / as.numeric(df[[3]][row]), 3)
      )
    } else {
      # Replace "Insf. Data" with NA for other columns
      df[row, col_name] <- NA
    }
  }

  # Convert column to numeric
  df[[col_name]] <- suppressWarnings(as.numeric(df[[col_name]]))
  return(df)
}

# Step 4: Main processing function
process_dataframe <- function(df) {
  # Identify columns with "<10"
  columns_with_under10 <- find_problematic_columns(df, "<10")

  # Fix "<10" values
  for (col in columns_with_under10) {
    df <- fix_under10(df, col)
  }

  # Identify columns with "Insf. Data"
  columns_with_insf_data <- find_problematic_columns(df, "Insf. Data")

  # Fix "Insf. Data"
  for (col_name in columns_with_insf_data) {
    col_index <- which(names(df) == col_name)
    df <- fix_insf_data(df, col_name, col_index)
  }

  return(df)
}

# Step 5: Wrapper function for cleaning
demand_func <- function(df) {
  df <- process_dataframe(df)
  return(df)
}

#if(any(ncv_demand$SOC=="* Your selected institution is not in the selected region.", na.rm = T))

not_in_selected_region <- function(data){
  if(any(data$SOC=="* Your selected institution is not in the selected region.", na.rm = T)){
    data <- data[-which(data$SOC=="* Your selected institution is not in the selected region."),]
    return(data)
  } else {
    return(data)
  }
}

remove_added_rows <- function(table) {
  if (sum(tail(is.na(pull(table, 1)), 2)) == 2){
    fixed <- table[1:(nrow(table)-2),]
    return(fixed)
  } else {
    return(table)
  }
}

format_perc_func <- function(x, p=F){
  final_offer <- paste0(round(100*x, 0), "%")
  if(p) {final_offer <- paste0("(",final_offer,")")}
  return(final_offer)
}

CIPCode2020 <- read_csv("CIPCode2020.csv") #%>% mutate(CIPCode = str_pad(CIPCode, side = "right", width = 8, pad = "0"))

cvml_demand <- read_excel(demand_hires[str_detect(demand_hires, pattern = "CVML")], sheet = "Occs") %>% demand_func() %>% not_in_selected_region() %>% remove_added_rows() %>% suppressMessages()
cvml_demand <- cvml_demand[cvml_demand$SOC %in% SOC,]
ca_demand <- read_excel(demand_hires[str_detect(demand_hires, pattern = "California")], sheet = "Occs") %>% demand_func() %>% not_in_selected_region() %>% remove_added_rows() %>% suppressMessages()
ca_demand <- ca_demand[ca_demand$SOC %in% SOC,]

all_ca_data <- read_excel("Occupation_Table_All_Occupations_in_California_081825.xlsx", sheet = "Occs") %>% suppressMessages()

test_demand_data <- function(socs){
      all_ca_data[all_ca_data$SOC%in%socs,] %>% demand_func() %>% not_in_selected_region() %>% remove_added_rows() %>% suppressMessages()
  }



soc_code_titles_df <- pull(ca_demand, Description)[!is.na(pull(ca_demand, SOC))]
soc_title <- pull(ca_demand, Description)[!is.na(pull(ca_demand, SOC))]

is_or_are <- function() {
  if(two_or_more_soc<2){
    "is"
  } else {
    "are"
  }
}

occupation_or_occupations <- function() {
  if(two_or_more_soc<2){
    "occupation"
  } else {
    "occupations"
  }
}

this_or_these <- function() {
  if(two_or_more_soc<2){
    "this"
  } else {
    "these"
  }
}

wage_to_dollar <- function(wage){
  wage_number <- as.numeric(wage)
  if(str_detect(wage, "\\.")) {
    wage_fixed <- str_pad(paste0("$", wage_number), "right", width = 6, "0")
  } else {
    wage_fixed <- paste0("$", wage_number, ".00")
  }
  return(wage_fixed)
}


if (two_or_more_soc == 1){
  jobs <- soc_title
  long_name_jobs_rule <- F
} else if (two_or_more_soc == 2){
  jobs <- paste0(soc_title[1], " and ", soc_title[2])
  long_name_jobs_rule <- F
  if(str_length(jobs) >= 50) {
    jobs <- str_to_lower(general_field)
    long_name_jobs_rule <- T
  }
} else if (two_or_more_soc > 2){
  jobs <- str_to_lower(general_field)
  long_name_jobs_rule <- T
} else {"error"}


related_occupations_or_no <- function() {
  if(long_name_jobs_rule){
    "-related occupations"
  } else {
    ""
  }
}

related_fields <- if (two_or_more_soc == 1) {
  as_paragraph(
    as_chunk(soc_title, prop = body_text_style_italic) # Apply style to the variable
  )

} else if (two_or_more_soc == 2 & str_length(jobs) < 50) {
  as_paragraph(
    as_chunk(paste0(soc_title[1], " and ", soc_title[2]), prop = body_text_style_italic) # Apply style to the variable
  )
} else if (two_or_more_soc > 2 |str_length(jobs) >=  50) {
  as_paragraph(
    as_chunk(general_field, prop = body_text_style_italic), # Apply style to the variable
    as_chunk(related_occupations_or_no(), prop = body_text_style_italic) # Apply style to the variable
  )
} else {
  "error"
}


related_fields <- if (two_or_more_soc == 1) {
  as_paragraph(
    as_chunk(soc_title, prop = body_text_style_italic) # Apply style to the variable
  )

} else if (two_or_more_soc == 2) {
  as_paragraph(
    as_chunk(paste0(soc_title[1], " and ", soc_title[2]), prop = body_text_style_italic) # Apply style to the variable
  )
} else if (two_or_more_soc > 2) {
  as_paragraph(
    as_chunk(general_field, prop = body_text_style_italic), # Apply style to the variable
    as_chunk(related_occupations_or_no(), prop = body_text_style_italic) # Apply style to the variable
  )
} else {
  "error"
}

demand_postings <- list.files(
  path = "../data",  # Assuming the files are in a "data" folder
  pattern = "^Job_Posting_Analytics.*\\.xlsx$",
  full.names = T,
  ignore.case = TRUE
)

advertised_salaries <- list.files(
  path = "../data",  # Assuming the files are in a "data" folder
  pattern = "^Job_Postings_Table.*\\.xlsx$",
  full.names = T,
  ignore.case = TRUE
)

# Read salary information from an Excel sheet, starting from the 5th row; convert "Observations" to numeric
#jp_salary <- read_excel(demand_postings[str_detect(demand_postings, pattern = region_acro)],
#    sheet = "Advertised Salary", skip = 5) %>%
#  mutate(Observations = as.numeric(Observations))

# Read job postings data from the specified Excel sheet, skipping the first row

for(jp_file in demand_postings) {

job_postings <-  read_excel(jp_file, sheet = "Parameters") %>% suppressMessages()
#job_postings <-  read_excel(demand_postings[1], sheet = "Parameters") %>% suppressMessages()
bachelors_preferred_filter <- length(which(str_detect(job_postings$Parameters, "Bachelor's")))
california_jp <- which(str_detect(job_postings$...2, "California"))

bachelors_preferred_filter <- bachelors_preferred_filter>0
california_present <- length(california_jp)>0

if(bachelors_preferred_filter & california_present) {
  bp_job_postings <- jp_file
}

if(california_present & !bachelors_preferred_filter)  {
  job_postings_all <- jp_file
}
}



ed_attainment_file <- list.files(
  #path = data_path,  # Assuming the files are in a "data" folder
  pattern = "^Educational Attainment.*\\.xlsx$",
  full.names = T,
  ignore.case = TRUE
)

supply_file <- list.files(
  #path = data_path,  # Assuming the files are in a "data" folder
  #pattern = "^Supply.*\\.xlsx$",
  pattern = "^Supply.*\\.xlsm$",
  full.names = T,
  ignore.case = TRUE
)

EducationalAttainment <- readxl::read_excel(ed_attainment_file,
                                            sheet = "Table 5.3", skip = 1)

#saveWorkbook(work_check_wb, "data_validation.xlsx", overwrite = TRUE)

EducationalAttainment_filtered <- EducationalAttainment %>%
  filter(!is.na(`2023 National Employment Matrix code`))  %>%
  filter(`2023 National Employment Matrix code` %in% SOC) %>%
  mutate(`2023 National Employment Matrix title` = str_remove_all(`2023 National Employment Matrix title`, pattern = "\\[1\\]"),
         `2023 National Employment Matrix title` = str_to_title(`2023 National Employment Matrix title`))

TOP_CIP_SOC_Current$`CIP Code` <- as.character(TOP_CIP_SOC_Current$`CIP Code`)
TOP_CIP_SOC_Current_supplementary$`CIP Code` <- as.character(TOP_CIP_SOC_Current_supplementary$`CIP Code`)
CIP_string <- unique(pull(TOP_CIP_SOC_Current_supplementary[TOP_CIP_SOC_Current_supplementary$`CIP Code`%in% CIP,], "CIP Code"))
cip_titles_v2 <- pull(TOP_CIP_SOC_Current_supplementary[which(TOP_CIP_SOC_Current_supplementary$`CIP Code` %in% CIP_string),], "CIP Title") %>% unique()
cip_codes_supplementary <- unique(TOP_CIP_SOC_Current_supplementary$`CIP Code`)


#CIP <- as.character(TOP_CIP_SOC_Current$`CIP Code`)
cc_supply_raw <- read_excel(supply_file, sheet = "Data_Supply CC Only")
ncc_supply_raw <- read_excel(supply_file, sheet = "Data_Other Ed Only")

ncc_supply <- read_excel(supply_file, sheet = "Data_Other Ed Only") %>%
  mutate(CIP = sprintf("%07.4f", as.numeric(as.character(CIP)))) %>%
  filter(CIP %in% str_split(params[["CIP"]], ", ", simplify = F)[[1]])

ncc_supply_cvml <- ncc_supply %>%
  filter(Regions == "Central")

ccc_supply <- read_excel(supply_file, sheet = "Data_Supply CC Only") %>%
  filter(`TOP6 or CIP` %in% str_remove(str_split(params[["TOP_supplementary"]], ", ", simplify = F)[[1]], "\\.")) %>%
  filter(`Community College Flag` == "Community College")

ccc_supply_cvml <- ccc_supply %>%
  filter(Regions == "Central", `Community College Flag` == "Community College")

CA2024_SSS <- readxl::read_excel("CA2024_SSS.xlsx",
                                 sheet = "SSW",
                                 skip = 8) %>%
  select(c(1:3))

CA2024_SSS <- readxl::read_excel("CA2024_SSS.xlsx",
                                 sheet = "SSW",
                                 skip = 8) %>% select(c(1:4))

names(CA2024_SSS) <- c("Counties", "tablenumber", "Adult", "Adult_Infant")

cvml_counties <- c(ncv_counties, scv_counties)

average_living_wage <- function(x, family_composition = "Adult", char=T) {
  if (x != "All") {
    ca_set <- CA2024_SSS %>% filter(str_detect(Counties, x))
  } else {
    ca_set <- CA2024_SSS
  }
  p2 <- median(ca_set[[family_composition]])

  if(char==T){
  p2 <- round(p2, 2) %>% as.character()
  p22 <- str_split_1(p2, "\\.")[1]
  p23 <- str_split_1(p2, "\\.")[2] %>% str_pad(width = 2, side = "right", pad = "0", use_width = T)
  p2 <- paste0("$", p22, ".", p23)

  }
 return(p2)
}

cvml_counties_string <- paste(cvml_counties, collapse = "|")
#average_living_wage(cvml_counties_string, "Adult")
#average_living_wage("All", "Adult")
#average_living_wage(".", "Adult")
#average_living_wage(".", "Adult_Infant")
#average_living_wage(cvml_counties_string, "Adult_Infant")


cvml_living_wage_adult <- average_living_wage(cvml_counties_string, "Adult", char = T)
cvml_living_wage_adult_infant <- average_living_wage(cvml_counties_string, "Adult_Infant")
#ca_living_wage <- average_living_wage(".")

#salary <- paste0("($", format(round(as.numeric(str_remove(hourly, "\\$")) * 2080, 0), big.mark = ",", scientific = FALSE), " annually)")
#replacement_text <- paste(requesting_region, "is", hourly, "per hour", salary, sep = " ")
text_date <- format(Sys.Date(), "%B %Y")

cvml_suppy_completions <- ccc_supply_cvml  %>%
    select(`TOP6`,`Award Level`,County, `Econ Subregion`, starts_with("20")) %>%
  distinct() %>%
  pivot_longer(cols = starts_with("20"),
               values_to = "completions",
               names_to = "acadyr") %>%
  #group_by(acadyr) %>%
  summarize(completions = sum(completions, na.rm = T))

suppy_completions_college_counts <- ccc_supply_cvml  %>%
  select(`institution name`, `TOP6`,`Award Level`,County, `Econ Subregion`, starts_with("20")) %>%
  distinct() %>%
  filter(str_detect(`Econ Subregion`, "Valley"))  %>%
  pivot_longer(cols = starts_with("20"),
               values_to = "completions",
               names_to = "acadyr") %>%
  #group_by(acadyr) %>%
  pull(`institution name`) %>%
  unique() %>%
  length()

ncc_suppy_completions_college_counts_regional <- ncc_supply_cvml  %>%
  select(`Institution Name`, CIP,`Award Level`,County, `Econ Subregion`, starts_with("20")) %>%
  distinct() %>%
  pivot_longer(cols = starts_with("20"),
               values_to = "completions",
               names_to = "acadyr") %>%
  pull(`Institution Name`) %>%
  unique() %>%
  length()


supply_yr <- ccc_supply_cvml  %>%
  select(`TOP6`,`Award Level`,County, `Econ Subregion`, starts_with("20")) %>%
  distinct() %>%
  filter(str_detect(`Econ Subregion`, "Valley"))  %>%
  pivot_longer(cols = starts_with("20"),
               values_to = "completions",
               names_to = "acadyr") %>%
  group_by(acadyr) %>%
  summarize(completions = sum(completions, na.rm = T)) %>%
  ungroup()  %>%
  pull(acadyr)

supply_yr_start <- supply_yr %>%
  min() %>%
  str_extract("\\d{4}")

supply_yr_end <- supply_yr %>%
  max() %>% str_sub(6,7)

if(is.na(supply_yr_start)) {
  supply_yr_start <- ccc_supply_cvml %>%
    select(starts_with("20")) %>%
    distinct() %>%
    first() %>%
    names() %>%
    min() %>%
    str_extract("\\d{4}")

}

if(is.na(supply_yr_end)|str_length(supply_yr_end)==2) {
  supply_yr_end <- ccc_supply_cvml %>%
    select(starts_with("20")) %>%
    distinct() %>%
    first() %>%
    names() %>%
    max() %>%
    str_sub(6,7)
  supply_yr_end <- paste0("20", supply_yr_end)
}

topdf <-TOP_CIP_SOC_Current_supplementary[,c("TOP Code", "TOP Code Title")] %>%
  distinct()


top_supps <- paste0(
  TOP_CIP_SOC_Current_supplementary$`TOP Code Title`,
  " (",
  TOP_CIP_SOC_Current_supplementary$`TOP Code`,
  ")"
) %>% unique()

a_degree_fix <- function(x, a=F, b=F) {
    fixed <- ifelse(b, str_to_lower(x), x)
  if(str_detect(fixed, pattern = "[Aa]ssociate's degree")) {
    fixed <- fixed %>% str_remove_all(pattern = "\\'s")
    a_or_and <- " an "
  } else {
    a_or_and <- " a "
  }
  a_or_and <- ifelse(!a, "", a_or_and)
  fixed <- paste0(a_or_and, fixed)
  fixed <- str_replace(fixed, pattern = "ged", replacement = "GED")
  fixed <- str_replace(fixed, pattern = "high school", replacement = "high school diploma")
  return(fixed)
}

a_degree_fix <- Vectorize(a_degree_fix)

#a_degree_fix("Associate's degree",a=T,b=T)

related_occupations_helper <- function(x="number"){
  if(related_occupations_or_no()!="") {

    if(x == "number"){
  return_me <- paste0("the ", xfun::n2w(length(SOC)))
  } else if (x=="report") {
    return_me <- "in this report"
  }

  } else {
    return_me <- ""
  }
 return(return_me)
}


top_code_title_w_top_code <- paste0(top_code_title, " (", TOP, ")")

top_code_title_w_top_code_supplementary <-
  paste(
    unique(
      paste0(
        pull(TOP_CIP_SOC_Current_supplementary, `TOP Code Title`),
        " (",
        paste0(str_sub(TOP_CIP_SOC_Current_supplementary$`TOP Code`, 1, 4),
               ".",
               str_sub(TOP_CIP_SOC_Current_supplementary$`TOP Code`, 6, 7)),
        ")")
    ), collapse = ", ")


soc_code_titles_df <- pull(ca_demand, Description)[!is.na(pull(ca_demand, SOC))]

soc_code_titles_string <- str_replace_all(paste0(soc_code_titles_df, collapse = "\n"), "\\n", ", ")

soc_code_titles_w_soc_code <- paste0(pull(ca_demand, Description)[!is.na(pull(ca_demand, SOC))], " (", pull(ca_demand, SOC)[!is.na(pull(ca_demand, SOC))], ")")

soc_code_titles <- soc_code_titles_df



repair_ps   <- normalizePath("repair_excel.ps1", winslash="\\", mustWork=TRUE)
macro_ps    <- normalizePath("run_vba_macro.ps1", winslash="\\", mustWork=TRUE)
template_xl <- normalizePath("vba_bdp.xlsm", winslash="\\", mustWork=TRUE)

exhibit_excel_fix <- function(tbl, file){
  #if(TRUE){
  if(file %in% skip_exhibit()){

    # Check if the file exists, if not create an empty .xlsx file
    #openxlsx::write.xlsx(list("Sheet" = data.frame()), file, overwrite=TRUE, asTable=TRUE)
    #openxlsx::write.xlsx("", "2_Exhibit.xlsx")
    #openxlsx::write.xlsx("", file, overwrite=TRUE, asTable=TRUE)
    openxlsx::write.xlsx(tbl, file, overwrite=TRUE, asTable=TRUE)
    full_output_filepath <- normalizePath(file, winslash="\\", mustWork=TRUE)

    # 1) Write the data to the .xlsx file
    openxlsx::write.xlsx(list("Sheet" = tbl), full_output_filepath, overwrite=TRUE, asTable=TRUE)

    # 2) Run repair_single.ps1 on the R-generated .xlsx file for Power Query metadata
    # This uses the 'repair_single.ps1' script.

    system2("powershell", args = c(
      "-NoProfile","-ExecutionPolicy","Bypass",
      "-File",          paste0('"', repair_ps, '"'), # Path to repair_xlsx_metadata.ps1
      "-FilePath",      paste0('"', full_output_filepath, '"') # Pass the XLSX path as -FilePath
    ), wait=TRUE)
    # 3) Trigger the VBA macro in the .xlsm template
    # This uses the script that 'macro_ps' points to.
    # THIS IS WHERE WE ADD THE -DataFilePath PARAMETER.
  } else {
    print(skip_exhibit())
  }
}

exhibit_word_doc <- function(file, macro) {
  if(file %in% skip_exhibit()){
    full_output_filepath <- normalizePath(file, winslash="\\", mustWork=TRUE)
    system2("powershell", args = c(
      "-NoProfile","-ExecutionPolicy","Bypass",
      "-File",          paste0('"', macro_ps, '"'), # <-- THIS IS YOUR MACRO RUNNER SCRIPT
      "-MacroName",     paste0('"', macro, '"'),
      "-WorkbookPath", paste0('"', template_xl, '"'),
      "-DataFilePath",  paste0('"', full_output_filepath, '"') # <-- NEW PARAMETER ADDED HERE
    ), wait=TRUE)

    # Give a moment before next (optional, but harmless)
    Sys.sleep(5)
  } else {
    print(skip_exhibit())
  }
}

exhibit_doc_func <- function(exhibit_ft) {
  number <- str_pad(str_extract(deparse(substitute(exhibit_ft)), "\\d+"), side = "left", width = 2, pad = "0")
  document <- read_docx("lma_blank_template.docx") %>%
    body_add_flextable(exhibit_ft)
  #return(assign(paste0("exhibit_doc", number), document, envir = .GlobalEnv))
  return(print(document, paste0("exhibit_0", number, ".docx")))
}


f_job_growth <- function(x){
  x %>%
    select(SOC, Description, names(x)[str_detect(names(x), pattern = "^(20[0-9]{2} Jobs)")], `Avg. Annual Openings`) %>%
    pivot_longer(
      cols = contains("Jobs"),   # Pivot the job columns (e.g., '2012 Jobs', '2013 Jobs', etc.)
      names_to = "Year",         # New column for the year
      names_pattern = "(\\d+)",  # Extract the year from the column names
      values_to = "Jobs_n"       # Job numbers in this column
    ) %>%
    distinct() %>%
    arrange(SOC, Year) %>%
    select(SOC, Description, Year, Jobs_n,`Avg. Annual Openings`) %>%
    rename(Annual_Openings = `Avg. Annual Openings`) %>%
    #mutate(Jobs_n = round(Jobs_n, 0)) %>%
    group_by(SOC) %>%
    mutate(perc_growth = ((Jobs_n - lag(Jobs_n))/lag(Jobs_n))*100) %>%
    ungroup()
}

f_job_growth_v2 <- function(x){
  x %>%
    select(SOC, Description, names(x)[str_detect(names(x), pattern = "^(20[0-9]{2} Jobs)")], `Avg. Annual Openings`) %>%
    pivot_longer(
      cols = contains("Jobs"),   # Pivot the job columns (e.g., '2012 Jobs', '2013 Jobs', etc.)
      names_to = "Year",         # New column for the year
      names_pattern = "(\\d+)",  # Extract the year from the column names
      values_to = "Jobs_n"       # Job numbers in this column
    ) %>%
    distinct() %>%
    arrange(SOC, Year) %>%
    select(SOC, Description, Year, Jobs_n,`Avg. Annual Openings`) %>%
    rename(Annual_Openings = `Avg. Annual Openings`) %>%
    mutate(Jobs_n = round(Jobs_n, 0)) %>%
    group_by(SOC) %>%
    #mutate(perc_growth = ((Jobs_n - lag(Jobs_n))/lag(Jobs_n))*100) %>%
    ungroup()
}

f_job_growth_v3 <- function(x){
  x %>%
    select(SOC, Description, names(x)[str_detect(names(x), pattern = "^(20[0-9]{2} Jobs)")], `Avg. Annual Openings`) %>%
    pivot_longer(
      cols = contains("Jobs"),   # Pivot the job columns (e.g., '2012 Jobs', '2013 Jobs', etc.)
      names_to = "Year",         # New column for the year
      names_pattern = "(\\d+)",  # Extract the year from the column names
      values_to = "Jobs_n"       # Job numbers in this column
    ) %>%
    distinct() %>%
    arrange(SOC, Year) %>%
    select(SOC, Description, Year, Jobs_n,`Avg. Annual Openings`) %>%
    rename(Annual_Openings = `Avg. Annual Openings`) %>%
    #mutate(Jobs_n = round(Jobs_n, 0)) %>%
    group_by(Year) %>%
    reframe(Jobs_n = sum(Jobs_n)) %>%
    mutate(perc_growth = ((Jobs_n - lag(Jobs_n))/lag(Jobs_n))*100) %>%
    ungroup()
}

increase_or_decrease_func <- function(x, a = 1){
  pos <- c("increase", "grow", "more", "over", "within")
  neg <- c("decrease", "decline", "less", "under", "below")
  value <- str_remove_all(x, pattern = "\\%|\\$|\\,") %>% as.numeric()
  output <- ifelse(x>0, pos[a], neg[a])
  return(output)
}

bachelor_range_f <- function(ranged, a=1){
  joiner <- c(" to ", " and ")[a]
  if(length(ranged)==1){
    final_offer <- format_perc_func(ranged)
  } else {
    final_offer <- paste0("between ", format_perc_func(ranged[1]), joiner , format_perc_func(ranged[2]))
  }
  return(final_offer)
}

all_soc_codes <- unique(pull(soc_2018_definitions[soc_2018_definitions$`SOC Group`=="Detailed", ], 2))

random_soc_gen_f <- function(n=1){
  sample(all_soc_codes, n, T)
}

soc_titles_f <- function(socs){
  soc_2018_definitions %>%
    filter(`SOC Code` %in% socs) %>%
    pull(`SOC Title`)
}

soc_2digit <- paste0(unique(str_extract(SOC, "\\d{2}")), "-0000")
#soc_2digit <- paste0(unique(str_extract(SOC_tester, "\\d{2}")), "-0000")

soc_2digit_titles <- soc_2018_definitions %>%
  filter(str_detect(`SOC Code`, pattern = "\\-0000")) %>%
  filter(`SOC Code` %in% soc_2digit) %>%
  mutate(SOC_2digit_titles = paste0(`SOC Title`, " (", `SOC Code`, ")")) %>%
  pull(SOC_2digit_titles)

soc_2digit_titles_func <- function(socs) {
  soc_2digit_titles_length <- length(socs)
  if (soc_2digit_titles_length==1){
    final_offer <- socs
  } else if (soc_2digit_titles_length==2) {
    final_offer <- paste0(socs[1], " and ", socs[2])
  } else if (soc_2digit_titles_length>2) {

    soc_2digit_titles_length_less_1 <- soc_2digit_titles_length-1
    all_but_last <- paste(socs[1:soc_2digit_titles_length_less_1], collapse = ", ")
    final_offer <- paste0(all_but_last, ", and ", socs[soc_2digit_titles_length])
  }
  return(final_offer)
}

format_num_func <- function(x, type = "%", p=F){
  if (type == "%"){
    final_offer <- paste0(round(100*x, 0), "%")
  } else if (type =="#") {
    final_offer <- prettyNum(round(x), big.mark = ",")
  } else if (type == "$S") {
    final_offer <- paste0("$", prettyNum(round(x), big.mark = ","))
  } else if (type == "$W") {
    wage <- str_split_1(as.character(x), "\\.")
    final_offer <- paste0("$", paste(wage[1], str_sub(str_pad(wage[2], side = "right", pad = "0", width = 2), 1,2), sep = "."))
  } else {
    final_offer <- "error"
  }
  if(p) {final_offer <- paste0("(",final_offer,")")}
  return(final_offer)
}

format_with_parentheses <- function(x) {
  ifelse(x < 0,
         paste0("(",
                format(
                  abs(x), trim = TRUE, big.mark = ","),
                ")"),
         format(x, big.mark = ","))
}

format_pct_with_parentheses <- function(x) {
  ifelse(x < 0, paste0("(", abs(x), "%)"), as.character(x))
}

format_paragraph <- function(paragraph1, paragraph2) {
  fpar_body <- list(ftext(paragraph1, body_text_style)) %>%
    append(soc_titles_formatted) %>%
    append(
      list(
        ftext(paragraph2, body_text_style),
        fp_p = fp_par(text.align = "justify")))
  final_offer <- do.call(fpar, fpar_body)
  return(final_offer)
}

# Update year on August of every year
year_set_func <- function(){
  date <- Sys.Date()
  year_set <- year(ymd(date))
  # Raise year on August
  if(year_set < 8) {
    year_set <- year_set - 2
  } else {
    year_set <- year_set - 1
  }
  return(year_set)
}



--------------------------------------------------

--- SCRIPT: exhibit1_bdp.R ---

e1 <- ca_demand %>%  select(SOC, Description, `Typical Entry Level Education`, `Work Experience Required`, `Typical On-The-Job Training`) %>%
  rename(Occupation = Description) %>%
  mutate(`Typical Entry Level Education` =  a_degree_fix(`Typical Entry Level Education`, a=F, b=F))

exhibit1_ft <- flextable(e1) %>%
    font(fontname = "Segoe UI", part = "all") %>%
  fontsize(size = 12, part = "all") %>%
  border_remove() %>%
  border_inner_h(border = border_settings, part = "body") %>%
  hline_top(border = border_settings, part = "body") %>%
  hline_bottom(border = border_settings, part = "body") %>%
  # Alignment
  align(j = 3:5, align = "center", part = "all") %>%
  # Header styling (no borders will be applied to header)
  bg(part = "header", bg = table1_header_color) %>%
  color(part = "header", color = table_header_fontcolor) %>%
  bold(part = "header") %>%
  bg(i = seq(ifelse(nrow(e1)==1, 1, 2), nrow(e1), 2), bg = table_banding_odd, part = "body") %>%
  bg(i = seq(1, nrow(e1), 2), bg = table_banding_even, part = "body") %>%
  # Table properties
  flextable::set_table_properties(layout = "autofit", width = 1)

exhibit_doc_func(exhibit1_ft)

--------------------------------------------------

--- SCRIPT: exhibit10_bdp.R ---


exhibit_10_func <- function(ca_or_cvml) {
  #  ca_or_cvml <- ca_job_growth
  e8_10 <- ca_or_cvml %>%
    mutate(region = NULL) %>%
    filter(
      Year == as.numeric(op_date_range_min) |
        Year == as.numeric(op_date_range_max)
    ) %>%
    #filter(if (trig) !is.na(SOC) else is.na(SOC)) %>%
    filter(!is.na(SOC)) %>%
    #group_by(SOC, Description, Year) %>%
    #reframe(perc_growth = )
    #select(region, Year, Jobs_n, Annual_Openings) %>%
    mutate(Year = paste0(Year, " Jobs")) %>%
    pivot_wider(
      names_from = Year,
      values_from = c(Jobs_n, perc_growth)
    )

  e8_10_1 <- e8_10 %>%  select(starts_with("Jobs"))
  e8_10_2 <- pull(e8_10_1, 2) - pull(e8_10_1, 1)
  col_name_e8_10 <- paste0(op_date_range_min, " - ", op_date_range_max, " Change")
  e8_10[[col_name_e8_10]] <- round(e8_10_2,0)

  e8_10_3 <- e8_10 %>%   select(ends_with("Change"))
  col_name_e8_10_2 <- paste0(op_date_range_min, " - ", op_date_range_max, " % Change")
  e8_10[[col_name_e8_10_2]] <- paste0(round(e8_10_2/pull(e8_10_1,1),2)*100, "%")


  names(e8_10)[which(str_detect(names(e8_10), "\\d{4}"))[1:2]] <- paste0(c(op_date_range_min, op_date_range_max), " Jobs")
  names(e8_10)[which(str_detect(names(e8_10), "Change"))]
  e8_10_1 <- e8_10[,c(which(str_detect(names(e8_10), "Description")), which(str_detect(names(e8_10), "\\d{4}"))[1:2], which(str_detect(names(e8_10), "Change")),which(str_detect(names(e8_10), "Annual")))]
  names(e8_10_1)[which(str_detect(names(e8_10_1), "Description"))] <- "Occupation"
  names(e8_10_1)[which(str_detect(names(e8_10_1), "Annual"))] <- "Annual Openings"

  e8_10_1[,2] <- round(e8_10_1[,2],0)
  e8_10_1[,3] <- round(e8_10_1[,3],0)
  e8_10_1[,6] <- round(e8_10_1[,6],0)

  e8_10_total_row <- tibble(
    Occupation = "Total",
    min_jobs = sum(e8_10_1[,2]),
    max_jobs = sum(e8_10_1[,3]),
    change_jobs = 0,
    perc_change_jobs = 0,
    openings = sum(e8_10_1[,6])
  )

  e8_10_total_row <- e8_10_total_row %>%
    mutate(change_jobs = max_jobs-min_jobs,
           perc_change_jobs = paste0(round(100*change_jobs/min_jobs), "%"))

  names(e8_10_total_row) <- names(e8_10_1)

  e8_10_2 <- bind_rows(e8_10_1, e8_10_total_row)

    return(e8_10_2)
}

cvml_annual_openings <- tail(pull(exhibit_10_func(f_job_growth(cvml_demand)), `Annual Openings`), 1)

--------------------------------------------------

--- SCRIPT: exhibit11_bdp.R ---


ncc_awards <- unique(ncc_supply_raw$`Award Level`)
text_bachelor <- ncc_awards[str_detect(ncc_awards, "Bachelor")]
text_masters_up <- ncc_awards[str_detect(ncc_awards, "Master|Doctor")]

# Option 3: More dynamic approach using across() for all year columns
#ncc_supply_cvml %>%
exhibit_11_func <- function(cvml_or_ca, region){
  if (nrow(cvml_or_ca)==0) {
  ex11 <-   tibble(
    `CIP Code` = CIP,
    `CIP Title` = cip_titles,
    `CVML Non-CC Baccalaureate Awards` = 0,
    `CVML Non-CC Master's or Above Awards` = 0,
  )
  } else {
ex11 <- cvml_or_ca %>%
  mutate(awards =
           case_when(
             `Award Level` == text_bachelor ~ paste0(region, " Non-CC Baccalaureate Awards"),
             `Award Level` %in% text_masters_up ~ paste0(region, " Non-CC Master's or Above Awards"),
             TRUE ~ NA
           )) %>%
  select(CIP, CipTitle, awards, starts_with("20")) %>%
  filter(!is.na(awards)) %>%
  pivot_longer(
    cols = starts_with("20")
  ) %>%
  group_by(awards, CIP, CipTitle) %>%
  reframe(value = sum(value)) %>%
  pivot_wider(
    names_from = awards,
    values_from = value
  )


if(suppressWarnings(is.null(ex11[[paste0(region, " Non-CC Baccalaureate Awards")]]))) {
  ex11[[paste0(region, " Non-CC Baccalaureate Awards")]] <- NA
}


if(suppressWarnings(is.null(ex11[[paste0(region, " Non-CC Master's or Above Awards")]]))) {
  ex11[[paste0(region, " Non-CC Master's or Above Awards")]] <- NA
}

names(ex11)[1:2] <- c("CIP Code", "CIP Title")
}
return(ex11)
}


exhibit11 <- full_join(
exhibit_11_func(ncc_supply_cvml, "CVML"),
exhibit_11_func(ncc_supply_raw[ncc_supply_raw$CIP %in% CIP_string,], "CA")
) %>% suppressMessages()

total_row_ex11 <- tibble(
v1 = "",
v2 = "3-Year Average",
v3 = sum(exhibit11[,3]),
v4 = sum(exhibit11[,4]),
v5 = sum(exhibit11[,5]),
v6 = sum(exhibit11[,6])
)

names(total_row_ex11) <- names(exhibit11)
exhibit11_1 <- bind_rows(exhibit11,total_row_ex11) %>%
  map_dfc(as.character) %>%
  map_dfc(function(x){ifelse(x==0, "-", x)})

exhibit11_ft <- flextable(exhibit11_1) %>%

  # Center align all content
  align(align = "center", part = "all") %>%

  # Set header labels with line breaks
#  set_header_labels(.labels = setNames(
#    c(gsub(" ", "\n", col_change, fixed = TRUE),
#      gsub(" ", "\n", col_pct_change, fixed = TRUE)),
#    c(col_change, col_pct_change)
#  )) %>%

  # Style header
  fontsize(size = 12, part = "header") %>%
  font(fontname = "Segoe UI", part = "header") %>%
  bold(part = "header") %>%
  color(color = "white", part = "header") %>%
  bg(bg = table1_header_color, part = "header") %>%

  # Style body
  fontsize(size = 12, part = "body") %>%
  font(fontname = "Segoe UI", part = "body") %>%

  # Style footer (last row as footer proxy)
  bg(i = seq(ifelse(nrow(exhibit11_1)==1, 1, 2), nrow(exhibit11_1), 2), bg = table_banding_odd, part = "body") %>%
  bg(i = seq(1, nrow(exhibit11_1), 2), bg = table_banding_even, part = "body") %>%
  fontsize(i = nrow(exhibit11_1), size = 12, part = "body") %>%
  font(i = nrow(exhibit11_1), fontname = "Segoe UI", part = "body") %>%
  bg(nrow(exhibit11_1), bg = total_bar_color, part = "body") %>%
  bold(nrow(exhibit11_1), part = "body") %>%
  border_remove() %>%
  border_inner_h(border = border_settings, part = "body") %>%
  vline(j = 4, border = fp_border(width = 3), part = "all") %>%
  hline_top(border = border_settings, part = "body") %>%
  hline_bottom(border = border_settings, part = "body") %>%

  # Autofit column widths
  autofit()


exhibit_doc_func(exhibit11_ft)
#exhibit11_ft

--------------------------------------------------

--- SCRIPT: exhibit12_bdp.R ---


supply_years <- ncc_supply_cvml %>%
  pivot_longer(
    cols = starts_with("20"),
    values_to = "awards",
    names_to = "acadyr"
  ) %>%
  pull(acadyr) %>%
  unique()

supply_years_min <- str_sub(supply_years,1, 4) %>% min()
supply_years_max <- str_sub(supply_years,6, 7) %>% max()
supply_years_max <- paste0("20",supply_years_max)


ex12 <-   ncc_supply_cvml %>%
  pivot_longer(
    cols = starts_with("20"),
    values_to = "awards",
    names_to = "acadyr"
  ) %>%
  mutate(acadyr = paste0(acadyr, " Awards")) %>%
  mutate(awards = as.numeric(ifelse(awards == "", NA, awards))) %>%
  rename(
    Institution.Name = `Institution Name`,

    CIPwithTitle = `CIP with Title`
  ) %>%
  select(`Institution.Name`, CIPwithTitle, `Award Level`, acadyr, awards) %>%
  #distinct() %>%
  group_by(`Institution.Name`, CIPwithTitle, acadyr) %>%
  summarize(awards = sum(awards, na.rm = TRUE), .groups = "drop") %>%
  pivot_wider(names_from = acadyr, values_from = awards)


if (nrow(ex12) == 0) {
  # Get the award columns
  award_columns <- ncc_supply_cvml  %>%
    select(starts_with("20")) %>%
    names() %>%
    paste0(" Awards")

  # Create a zero-filled list for awards
  awards_zero <- as.list(rep(0, length(award_columns)))
  names(awards_zero) <- award_columns

  for (cip_code in seq_along(CIP)) {
    temp_row <- data.frame(
      `Institution.Name` = "-",
      `CIPwithTitle` = cip_titles_v2[cip_code],
      #`CIPwithTitle` = CIP_titles_code_supplementary[cip_code],
      awards_zero, # Assuming awards_zero is numeric and default is 0
      stringsAsFactors = FALSE
    )
    ex12 <- bind_rows(ex12, temp_row) # Add the new row to the dataframe
  }

  # Ensure 'award_columns' has the correct length
  names(ex12)[5:(4 + length(award_columns))] <- award_columns
}

# Proceed with the rest of the code
ex12_1 <- ex12 %>%
  mutate(
    `CIP Code` = str_split(CIPwithTitle, pattern = "-", simplify = TRUE)[,1],
    Program = str_squish(str_split(CIPwithTitle, pattern = "-", simplify = TRUE)[,2]),
    `CIP Code` = str_squish(sub("^(\\d{4})(\\d+)$", "\\1.\\2", `CIP Code`))
  ) %>%
  rename(Institution = `Institution.Name`) %>%
  select(`CIP Code`, Program, Institution, starts_with("20")) %>%
  rowwise() %>%
  mutate(`3-Year Award Average` = round(mean(c_across(starts_with("20")), na.rm = TRUE), 0)) %>%
  ungroup() %>%
  #mutate(`TOP Code` = paste0(str_sub(`TOP Code`, 1, 4), ".", str_sub(`TOP Code`, 5, 6))) %>%
  filter(`CIP Code` %in% CIP) %>%
  rename(Institution = Institution)

top_part_table <- ex12_1 %>%
  bind_rows(
    #   ccc_supplyn %>%
    ex12_1 %>%
      group_by(`CIP Code`, Program) %>%
      summarise(
        across(
          starts_with("20"),
          sum,
          na.rm = TRUE
        )
      ) %>%
      mutate(`3-Year Award Average` = round(mean(c_across(starts_with("20")), na.rm = TRUE), 0)) #%>%
      #  mutate(Institution = "North CVML")
      #mutate(Institution = paste0("z", ))
    #mutate(Institution = paste0("z", "North CVML"))
  ) %>%
  arrange(`CIP Code`, Institution)

top_part_table[nrow(top_part_table), 1] <- "Supply Total/Average"
top_part_table[nrow(top_part_table), 2] <- "Supply Total/Average"
top_part_table[nrow(top_part_table), 3] <- "Supply Total/Average"

exhibit12_ft <- top_part_table %>%
    map_dfc(function(x){ifelse(x==0, "-", x)}) %>%
    flextable() %>%
    theme_booktabs() %>% # Apply theme first

    # Set the overall font family
    font(fontname = "Segoe UI", part = "all") %>%

    # Set font sizes
    fontsize(size = 12, part = "all") %>%
    # Apply all borders initially
    border_remove() %>%
    border_inner_h(border = border_settings_v2, part = "header") %>%
    border_inner_v(border = border_settings_v2, part = "header") %>%


    align(j = 1:3, align = "left", part = "body") %>%
    align(j = 1:3, align = "center", part = "header") %>%
    align(j = 4:7, align = "center", part = "all") %>%
    align(i = ~ str_detect(Institution, "otal"),
          j = 1:3, align = "right", part = "body") %>%


    # Apply vertical merging to "TOP Code" and "Program" columns
    merge_v(j = c(1, 2)) %>%

    # Apply horizontal merging to "Subtotal/Average" and "Grand Total" rows
    # This will merge the first three columns in these specific rows
    #merge_h(i = ~ Institution == "Subtotal/Average" | str_detect(Institution, "Grand Total")
    #part = "body"
    #j = 1:3
    #) #%>%
    merge_h_range(
      i = ~ Institution == "Supply Total/Average",
      j1 = "CIP Code",
      j2 = "Institution",
      part = "body"
    ) %>%

    bg(part = "header", bg = table1_header_color) %>%
    color(part = "header", color = table_header_fontcolor) %>%
    bold(part = "header") %>%
    bg(nrow(top_part_table), bg = total_bar_color, part = "body") %>%
    bold(nrow(top_part_table), part = "body") %>%
    set_table_properties(layout = "autofit", width = 1)

exhibit_doc_func(exhibit12_ft)



--------------------------------------------------

--- SCRIPT: exhibit13_bdp.R ---


prepare_data <- function(data) {

  d1 <- data %>%
    filter(!is.na(SOC)) %>%
    select(Description, contains("Hourly Earnings")) %>%
    select(Description, contains(c("25", "Median", "75"))) %>%
    rename(
      `Entry-Level Hourly Earnings` = `Pct. 25 Hourly Earnings`,
      `Median Hourly Earnings` = `Median Hourly Earnings`,
      `Experienced Hourly Earnings` = `Pct. 75 Hourly Earnings`
    ) %>%
    pivot_longer(
      cols = c("Entry-Level Hourly Earnings", "Median Hourly Earnings", "Experienced Hourly Earnings"),
      values_to = "earnings",
      names_to = "lev"
    ) %>%
    mutate(
      gap = earnings - lag(earnings),
      gap = ifelse(lev == "Entry-Level Hourly Earnings", earnings, gap),
      earnings = round(earnings, 2),
      #Description = str_wrap(Description, width = 20)
    )
  descr <- pull(d1, Description)[1:(nrow(d1)-1)] %>% unique()
  d1 %>%
    mutate(Description = factor(Description, levels = (descr), ordered = T))
}

cvml_living_wage_adult <- average_living_wage(cvml_counties_string, "Adult")
cvml_living_wage_adult_infant <- average_living_wage(cvml_counties_string, "Adult_Infant")

exhibit13_cvml <- prepare_data(cvml_demand)
exhibit13_cvml$region <- "CVML"
#exhibit13_cvml$cvml_living_wage_adult <- cvml_living_wage_adult
#exhibit13_cvml$cvml_living_wage_adult_infant <- cvml_living_wage_adult_infant

reg_lw_count <- function(living_wage, number=F, all=F) {
  lw_fixed <- as.numeric(str_remove_all(living_wage, "\\$|\\,"))
  num <- exhibit13_cvml %>% filter(lev == "Entry-Level Hourly Earnings") %>%
    filter(earnings >= lw_fixed) %>%
    nrow() #%>%    xfun::n2w()

  if (num==length(SOC)&all==T) {
    num <- "all"
  }
  if(number==T){
    return(xfun::n2w(num))
  } else {
    return(num)
  }
}

reg_lw_count(cvml_living_wage_adult, all=T)
reg_lw_count(cvml_living_wage_adult_infant, all=T)
reg_lw_count(cvml_living_wage_adult_infant, number=F, all=T)


orderer <- ca_demand[, c(1,2)]
orderer_2 <- orderer[!is.na(orderer$SOC),] %>% mutate(order = 1)
orderer_3 <- orderer_2 %>%
  arrange(SOC) %>%
  mutate(order = cumsum(order))

exhibit13_cvml_1 <- exhibit13_cvml %>%
  select(-gap) %>%
  pivot_wider(names_from = lev,
              values_from = earnings) %>%
  #select(1, 4, 5, 6, 2, 3) %>%
  left_join(orderer_3) %>%
  arrange(desc(order)) %>%
  select(-SOC, -order, -region)


exhibit_excel_fix(exhibit13_cvml_1, "13_Exhibit.xlsx")
exhibit_word_doc("13_Exhibit.xlsx", "Process13")

entry_lev_wages <- pull(exhibit13_cvml[exhibit13_cvml$lev=="Entry-Level Hourly Earnings",], earnings)
above_lw_index <- which(average_living_wage(cvml_counties_string, "Adult", char = F) < entry_lev_wages)




--------------------------------------------------

--- SCRIPT: exhibit2_bdp.R ---

#```{r exhibit9, chunk_progress=TRUE}

exhibit2 <- EducationalAttainment_filtered %>%
  select(c(0:9)) %>%
  pivot_longer(
    cols = c(3:9),
    names_to = "lev",
    values_to = "per")


#table(exhibit9_1$lev)

ed_levels <- c(
  "Less than high school diploma",
  "High school diploma or equivalent",
  "Some college, no degree",
  "Associate's degree",
  "Bachelor's degree",
  "Master's degree",
  "Doctoral or professional degree")

ed_levels_abrev <- c("High School Diploma or Less",
                     "Some College or Associate Degree",
                     "Bachelor's Degree",
                     "Graduate or Professional Degree")

ed_levels_abrev_v2 <- c("High School Diploma or Less",
                     "Some college, no degree",
                     "Associate's degree",
                     "Bachelor's Degree",
                     "Graduate or Professional Degree")

exhibit2_1 <- exhibit2 %>%
  mutate(ed_levels = case_when(
    lev %in% c("Less than high school diploma", "High school diploma or equivalent") ~ "High School Diploma or Less",
    lev %in% c("Some college, no degree", "Associate's degree") ~ "Some College or Associate Degree",
    lev == "Bachelor's degree" ~ "Bachelor's Degree",
    lev %in% c("Master's degree", "Doctoral or professional degree") ~ "Graduate or Professional Degree",
    TRUE ~ lev  # Keep the level unchanged if it doesn't match any case
#  ),
#  `2023 National Employment Matrix title` =
#    str_wrap(`2023 National Employment Matrix title`, width = 20)
  )) %>%
  rename(field = `2023 National Employment Matrix title`) %>%
  mutate(ed_levels = factor(ed_levels, levels = rev(ed_levels_abrev), order=T)) %>%
  group_by(field, ed_levels) %>%
  summarize(per = round(sum(per),0)) %>%
  arrange(field, ed_levels) %>%
  ungroup() %>%
  suppressMessages()
#mutate(per = paste0(round(per,0), "%")) %>%
#mutate(field = str_replace_all(str_wrap(field, width = 30), "\n", "<br>")) %>%


exhibit2_2 <- exhibit2 %>%
  mutate(ed_levels = case_when(
    lev %in% c("Less than high school diploma", "High school diploma or equivalent") ~ "High School Diploma or Less",
    lev %in% c("Some college, no degree", "Associate's degree") ~ "Some College or Associate Degree",
    lev == "Bachelor's degree" ~ "Bachelor's Degree",
    lev %in% c("Master's degree", "Doctoral or professional degree") ~ "Graduate or Professional Degree",
    TRUE ~ lev
  ),
  field = str_wrap(`2023 National Employment Matrix title`, width = 20)) %>%
  mutate(ed_levels = factor(ed_levels, levels = rev(ed_levels_abrev), order=T)) %>%
  group_by(field, ed_levels) %>%
  summarize(per = round(sum(per),0)) %>%
  arrange(field, ed_levels) %>%
  ungroup() %>%
  group_by(field) %>%
  mutate(cum_per = cumsum(per),
         label_position = case_when(
           ed_levels == "High School Diploma or Less" ~ 5,  # Far left
           ed_levels == "Graduate or Professional Degree" ~ 100,  # Far right
           TRUE ~ lag(abs(cum_per-100), 0)  # Others lag by 1
         )) %>%
  ungroup() %>%
  suppressMessages()


exhibit2_3 <- exhibit2_2 %>%
  rename(cumulative_per = cum_per) %>%
  select(-label_position, -cumulative_per) %>%
  mutate(field = str_replace_all(field, pattern = "\n", replacement = " "),
         per = round(per/100, 2)) %>%
  pivot_wider(names_from = ed_levels,
              values_from = per) %>%
  select(1, 5,4,3,2) #%>%  arrange(desc(`Some College or Associate Degree` ))

exhibit_excel_fix(exhibit2_3, "2_Exhibit.xlsx")
exhibit_word_doc("2_Exhibit.xlsx", "Process2")


exhibit2_4 <- exhibit2 %>%
  mutate(ed_levels = case_when(
    lev %in% c("Less than high school diploma", "High school diploma or equivalent") ~ "High School Diploma or Less",
    #lev %in% c("Some college, no degree", "Associate's degree") ~ "Some College or Associate Degree",
    lev == "Bachelor's degree" ~ "Bachelor's Degree",
    lev %in% c("Master's degree", "Doctoral or professional degree") ~ "Graduate or Professional Degree",
    TRUE ~ lev
  ),
  field = str_wrap(`2023 National Employment Matrix title`, width = 20)) %>%
  mutate(ed_levels = factor(ed_levels, levels = rev(ed_levels_abrev_v2), order=T)) %>%
  group_by(field, ed_levels) %>%
  summarize(per = round(sum(per),0)) %>%
  arrange(field, ed_levels) %>%
  ungroup() %>%
  group_by(field) %>%
  mutate(cum_per = cumsum(per),
         label_position = case_when(
           ed_levels == "High School Diploma or Less" ~ 5,  # Far left
           ed_levels == "Graduate or Professional Degree" ~ 100,  # Far right
           TRUE ~ lag(abs(cum_per-100), 0)  # Others lag by 1
         )) %>%
  ungroup() %>%
  rename(cumulative_per = cum_per) %>%
  select(-label_position, -cumulative_per) %>%
  mutate(field = str_replace_all(field, pattern = "\n", replacement = " "),
         per = round(per/100, 2)) %>%
  pivot_wider(names_from = ed_levels,
              values_from = per) %>%
suppressMessages()



bachelor_range <- pull(exhibit2_4, names(exhibit2_4)[str_detect(names(exhibit2_4), "Bachelor")]) %>% range() %>% unique()
#bachelor_range_test <- c(.01, .23, .15, .45, .85, .22) %>% range()


bachelor_range_f(bachelor_range, 2)

--------------------------------------------------

--- SCRIPT: exhibit3_bdp.R ---



jp_sheets <- readxl::excel_sheets(bp_job_postings)
jp_edu_index <- jp_sheets %>% str_detect("Edu and Experience")
jp_edu_sheets <- jp_sheets[jp_edu_index]

for (edu_sheet in jp_edu_sheets) {
  jp_edu <- read_excel(bp_job_postings,
                       sheet = edu_sheet,
                       skip = 0) %>% suppressMessages()
  if(str_detect(names(jp_edu)[1], "Minimum Education")){
    jp_min_edu_sheet <- edu_sheet
  }
}

jp_min_edu_required <-  read_excel(bp_job_postings,
                                   sheet = jp_min_edu_sheet,
                                   skip = 1)

ex3 <- jp_min_edu_required %>%
  rename(`Education Level` = `Minimum Education Level`, `Job Postings` = `Unique Postings (minimum)`) %>%
  mutate(order = 1)  %>%
  select(`Education Level`, `Job Postings`, order) %>%
  mutate(
    `Education Level` = ifelse(`Education Level` %in% c("Master's degree", "Ph.D. or professional degree"), "Master's degree or higher", a_degree_fix(`Education Level`))
  ) %>%
  group_by(`Education Level`) %>%
  reframe(`Job Postings` = sum(`Job Postings`))


ex3_order <- c("High school or GED", "Associate degree", "Bachelor's degree", "Master's degree or higher")
ex3_order <- factor(ex3_order, ordered = T)
jb_nb <- sum(ex3$`Job Postings`)
ex3_1 <- ex3 %>% mutate(`Percentage of Job Postings` = paste0(100*round(`Job Postings`/jb_nb,2), "%"))

ex3_1 <- ex3_1 %>%
  mutate(`Education Level` = factor(`Education Level`, levels = ex3_order, order = T)) %>%
  arrange(`Education Level`)

total_job_postings <- prettyNum(sum(ex3$`Job Postings`), big.mark = ",", scientific = FALSE)

exhibit_345_func <- function(exhibit){

  exhibit_ft <- flextable(exhibit) %>%
  align(align = "center", part = "all") %>%
  fontsize(size = 12, part = "header") %>%
  font(fontname = "Segoe UI", part = "header") %>%
  bold(part = "header") %>%
  color(color = table_header_fontcolor, part = "header") %>%
  bg(bg = table1_header_color, part = "header") %>%
  border_remove() %>%
  border_inner_h(border = border_settings, part = "body") %>%
  hline_top(border = border_settings, part = "body") %>%
  hline_bottom(border = border_settings, part = "body") %>%
  fontsize(size = 12, part = "body") %>%
  font(fontname = "Segoe UI", part = "body") %>%
  bg(i = seq(ifelse(nrow(exhibit)==1, 1, 2), nrow(exhibit), 2), bg = table_banding_even, part = "body") %>%
  bg(i = seq(1, nrow(exhibit), 2), bg = table_banding_odd, part = "body") %>%
  fontsize(i = nrow(exhibit), size = 12, part = "body") %>%
  font(i = nrow(exhibit), fontname = "Segoe UI", part = "body") %>%
  autofit()
return(exhibit_ft)
}


e_3_ft <- exhibit_345_func(ex3_1) %>%
  bold(which(str_detect(ex3_1$`Education Level`, "Bachelor")))

exhibit_doc_func(e_3_ft)

#e_3_ft

--------------------------------------------------

--- SCRIPT: exhibit4_bdp.R ---


jp_top_qualifications <-  read_excel(bp_job_postings,
                                   sheet = "Top Qualifications (2)",
                                   skip = 1)

ex4 <- jp_top_qualifications %>%
  #rename(`Education Level` = `Minimum Education Level`, `Job Postings` = `Unique Postings (minimum)`) %>%
  rename(postings = `Postings with Qualification`) %>%
  mutate(`Percentage of Job Postings` = paste0(round(postings/jb_nb, 2)*100, "%")) %>%
  rename(`License or Certification` = Qualification, `Job Postings` = postings) %>%
  head(10)

e_4_ft <- exhibit_345_func(ex4)

exhibit_doc_func(e_4_ft)


jp_top_qualifications_2 <- jp_top_qualifications %>% head(2)

lcc_title <- pull(jp_top_qualifications_2, 1)
lcc_perc <- paste0(round(pull(jp_top_qualifications_2, 2)/jb_all,2)*100, "%")


--------------------------------------------------

--- SCRIPT: exhibit5_bdp.R ---


jp_sheets <- readxl::excel_sheets(bp_job_postings)
jp_edu_index <- jp_sheets %>% str_detect("Edu and Experience")
jp_edu_sheets <- jp_sheets[jp_edu_index]

jp_func <- function(job_postings, sheet_needed){
  jp_sheet_output <- "no match"
  for (sheet in jp_edu_sheets) {
    jp_sheet_iteration <- read_excel(job_postings,
                                     sheet = sheet,
                                     skip = 0) %>%
      suppressMessages()
    #names(jp_sheet_iteration) <- slice(jp_sheet_iteration, 2)
    if(names(jp_sheet_iteration)[1] == sheet_needed){
      names(jp_sheet_iteration) <- slice(jp_sheet_iteration, 2)
      jp_sheet_output <- slice(jp_sheet_iteration, -c(1,2))
      jp_sheet_output[[2]] <- as.numeric(jp_sheet_output[[2]])
      jp_sheet_output[[3]] <- as.numeric(jp_sheet_output[[3]])

    }
  }
  return(jp_sheet_output)
}

bp_jp_min_exp_required <-  jp_func(bp_job_postings, "Experience Breakdown")

ex5 <- bp_jp_min_exp_required %>%
  rename(`Years of Experience` = `Minimum Experience`, `Job Postings` = `Unique Postings`, `Percentage of Job Postings` = `% of Total`) %>%
  mutate(`Percentage of Job Postings` = paste0(round(`Percentage of Job Postings`, 2)*100, "%")) %>%
  slice(-1)

e_5_ft <- exhibit_345_func(ex5)
exhibit_doc_func(e_5_ft)

jp_ad_count_sheet <- jp_sheets == ("Job Postings Top Occs")
jp_ad_count <- read_excel(job_postings_all,
                     sheet = jp_sheets[jp_ad_count_sheet],
                     skip = 2) %>% suppressMessages()

unique_postings <- sum(pull(jp_ad_count,which(str_detect(names(jp_ad_count), "Unique"))))

jp_all_sheets <- readxl::excel_sheets(job_postings_all)
jb_all_count <- jp_func(job_postings_all, "Minimum Education Breakdown")

jb_all <- sum(pull(jb_all_count, 2))
jb_bachelor <- pull(jb_all_count[str_detect(jb_all_count$`Minimum Education Level`, "Bachelor"),], 2)

###### Document officeR_007jobpostings_workexp_bdp.R


#jb_nb <- sum(jp_min_exp_required$`Unique Postings`)
exhibit_5_narrative_func <- function(jp_experience_sheet) {
  ex5_narrative <- jp_experience_sheet %>%
    rename(`Years of Experience` = `Minimum Experience`, `Job Postings` = `Unique Postings`, `Percentage of Job Postings` = `% of Total`) %>%
    mutate(`Percentage of Job Postings` = paste0(round(`Percentage of Job Postings`, 2)*100, "%"))

  ex5_narrative <- head(ex5_narrative[order(ex5_narrative$`Job Postings`, decreasing =T),])
  ex5_narrative$`Years of Experience` <- if_else(ex5_narrative$`Years of Experience`== "No Experience Listed", " no years ", str_to_lower(ex5_narrative$`Years of Experience`))

  ex5_narrative <- ex5_narrative %>%
    mutate(perc_and_count = paste0(`Percentage of Job Postings`, " (", prettyNum(`Job Postings`, big.mark = ","), ")"))
  return(ex5_narrative)
  }

jp_min_exp_required_all <-  jp_func(job_postings_all, "Experience Breakdown")
ex5_v2 <- exhibit_5_narrative_func(jp_min_exp_required_all)
typical_entry_level_work_experience_for_all <- pull(ex5_v2, 1)[1]

ex5_v2_bp <- exhibit_5_narrative_func(jp_min_exp_required)
typical_entry_level_work_experience_for_bachelor_preferance <- c(pull(ex5_v2_bp, 4)[1], pull(ex5_v2_bp, 1)[1])
typical_entry_level_work_experience_for_bachelor_preferance_followed_by <- c(pull(ex5_v2_bp, 4)[2], pull(ex5_v2_bp, 1)[2])

#jp_func(bp_job_postings, "Minimum Education Breakdown")
#jp_func(bp_job_postings, "Experience Breakdown")

degree_alignment_figures <- jp_func(bp_job_postings, "Education Breakdown")

daf_index <- which(str_detect(degree_alignment_figures$`Education Level`, "Bachelor"))

perc_req_bach <- sum(pull(degree_alignment_figures,2)[daf_index])/sum(pull(degree_alignment_figures,2))


--------------------------------------------------

--- SCRIPT: exhibit6_bdp.R ---

for(jp_file in advertised_salaries) {
  job_postings <-  read_excel(jp_file, sheet = "Parameters") %>% suppressMessages()

  hs_preferred_filter <- length(which(str_detect(job_postings$Parameters, "High school")))
  associate_preferred_filter <- length(which(str_detect(job_postings$Parameters, "Associate's")))
  bachelors_preferred_filter <- length(which(str_detect(job_postings$Parameters, "Bachelor's")))
  mastersplus_preferred_filter <- length(which(str_detect(job_postings$Parameters, "Master's")))

  if(hs_preferred_filter==1) {
    hs_advertised_salaries <- jp_file
  }
  else if (associate_preferred_filter==1) {
    as_advertised_salaries <- jp_file
  }
  else if (bachelors_preferred_filter==1){
    bs_advertised_salaries <- jp_file
  }
  else if (mastersplus_preferred_filter==1){
    ms_advertised_salaries <- jp_file
  } else {
    "error"
  }
}

advertised_salaries_files <- c(hs_advertised_salaries, as_advertised_salaries, bs_advertised_salaries, ms_advertised_salaries)
advertised_salaries_list <- list()

weighted_avg_salary_column_func <- function(tab_x, column, nrow_length){
  #value <- tab_x[[names(tab_x)[which(str_detect(names(tab_x), column))]]][nrow_length]
  value <- tab_x[[names(tab_x)[which(str_detect(names(tab_x), column))]]]
  v_length <- length(na.omit(value))
  ads <- table[[names(table)[which(str_detect(names(table), "Advertised Salary Observations"))]]]
  ads <- ads[1:v_length]
  output <- sum((ads/sum(ads))*value[1:v_length])
  return(output)
}

advertised_salary_func <- function(table_num = T){
for (file in advertised_salaries_files){
  education <- c("High school diploma or GED", "Associate degree", "Bachelor's degree", "Master's degree or above")[which(advertised_salaries_files %in% file)]
  tab  <- read_excel(file, sheet = "Job Postings Occ Table") %>% suppressMessages()
  ad_table_length <- nrow(tab[!is.na(tab$SOC),])

  postings <- sum(pull(tab, names(tab)[which(str_detect(names(tab), "Advertised Salary Observations"))])[1:ad_table_length]) %>% prettyNum(big.mark = ",")
  salary <- weighted_avg_salary_column_func(tab, "Pct. 25 Annual", ad_table_length) %>% round() %>% prettyNum(big.mark = ",")
  hourly <- weighted_avg_salary_column_func(tab, "Pct. 25 Hourly", ad_table_length) %>% round(2) %>% format_num_func("")
if(table_num){
  ad_table <- tibble(
    "Education" = education,
    "Job Postings\nwith Advertised\nSalary" = postings,
    "Advertised\nEntry-Level\nWage" = paste0("$",salary,
                                           "\n(",
                                           hourly,
                                           ")"
    )
  )

  advertised_salaries_list[[file]] <-  ad_table
} else {
  ad_table <- tibble(
    "Education" = education,
    "Job Postings with Advertised Salary" = postings,
    "Advertised Salary" = weighted_avg_salary_column_func(tab, "Pct. 25 Annual", ad_table_length) %>% round(2),
    "Advertised Wage" = weighted_avg_salary_column_func(tab, "Pct. 25 Hourly", ad_table_length) %>% round(2)
    )
  advertised_salaries_list[[file]] <-  ad_table
}
  advertised_salaries_table <- do.call(bind_rows, advertised_salaries_list)}
  return(advertised_salaries_table)
}

advertised_salaries_table <- advertised_salary_func()

exhibit6_ft <- flextable(advertised_salaries_table) %>%
  align(align = "center", part = "all") %>%
  fontsize(size = 12, part = "all") %>%
  font(fontname = "Segoe UI", part = "all") %>%
  bold(part = "header") %>%
  color(color = table_header_fontcolor, part = "header") %>%
  bg(bg = table1_header_color, part = "header") %>%

  bold(j = 1, part = "body") %>%
  color(j = 1, color = table_header_fontcolor, part = "body") %>%
  bg(i = str_detect(advertised_salaries_table$Education, "Bachelor's"), bg = "#D3D4D3", part = "body") %>%
  bg(j = 1, bg = table1_header_color, part = "body") %>%
  border_remove() %>%
  border_inner_h(border = border_settings, part = "body") %>%
  border_inner_v(border = border_settings, part = "body") %>%
  border_outer(border = border_settings, part = "all") %>%
  #hline_top(border = border_settings, part = "body") %>%
  #hline_bottom(border = border_settings, part = "body") %>%
  #fontsize(size = 12, part = "body") %>%
  #font(fontname = "Segoe UI", part = "body") %>%
  bold(i = str_detect(advertised_salaries_table$Education, "Bachelor's"), part = "body") %>%
  autofit()


exhibit_doc_func(exhibit6_ft)


###### Document officeR_008advertised_salary_bdp

jp_ned <- sum(as.numeric(pull(advertised_salaries_table, 2)))

advertised_salaries_table_numbers <- advertised_salary_func(F)

ast_wage <- function(degree) {
  index <- which(str_detect(advertised_salaries_table_numbers$Education,degree))
  return(pull(advertised_salaries_table_numbers, "Advertised Wage")[index])
}

b_a_difference <- ast_wage("Bachelor") - ast_wage("Associate")

format_num_func(b_a_difference, "$W")

--------------------------------------------------

--- SCRIPT: exhibit7_bdp.R ---


#min_year <- year_set_func()
#last_year <- min_year+ 10

ca_jobs <- ca_demand %>% select(SOC, Description, names(ca_demand)[str_detect(names(ca_demand), pattern = "^(20[0-9]{2} Jobs)")], `Avg. Annual Openings`)

ca_jobs_bdp <- ca_jobs[,c(-3,-4)]
names(ca_jobs_bdp) <- names(ca_jobs_bdp) %>% str_remove_all(" Jobs|\\...\\d{2}")

exhibit_7 <- pivot_longer(ca_jobs_bdp, cols = -c(1,2),
             names_to = "year",
             values_to = "jobs") %>%
  mutate(year = as.numeric(year)) %>%
  mutate(SOC = "California",
         Description = NULL) %>%
  rename(region = SOC) %>%
  #filter(between(year, min_year, last_year)) %>%
  filter(between(year, year_set_func(), year_set_func()+10)) %>%
  group_by(region, year) %>%
  reframe(jobs = round(sum(jobs))) %>%
  pivot_wider(
    names_from = year,
    values_from = jobs
  ) %>%
  suppressWarnings()

exhibit_excel_fix(exhibit_7, "7_Exhibit.xlsx")
exhibit_word_doc("7_Exhibit.xlsx", "Process7")




--------------------------------------------------

--- SCRIPT: exhibit8_bdp.R ---



op_date_range_min <- year_set_func()-1
op_date_range_max <- op_date_range_min + 10
# Custom formatting functions



exhibit_8_10_func <- function(ca_or_cvml) {
#  ca_or_cvml <- ca_job_growth
e8_10 <- ca_or_cvml %>%
  mutate(region = NULL) %>%
  filter(
    Year == as.numeric(op_date_range_min) |
      Year == as.numeric(op_date_range_max)
  ) %>%
  #filter(if (trig) !is.na(SOC) else is.na(SOC)) %>%
  filter(!is.na(SOC)) %>%
  #group_by(SOC, Description, Year) %>%
  #reframe(perc_growth = )
  #select(region, Year, Jobs_n, Annual_Openings) %>%
  mutate(Year = paste0(Year, " Jobs")) %>%
  pivot_wider(
    names_from = Year,
    values_from = c(Jobs_n, perc_growth)
  )

e8_10_1 <- e8_10 %>%  select(starts_with("Jobs"))
e8_10_2 <- pull(e8_10_1, 2) - pull(e8_10_1, 1)
col_name_e8_10 <- paste0(op_date_range_min, " - ", op_date_range_max, " Change")
e8_10[[col_name_e8_10]] <- round(e8_10_2,0)

e8_10_3 <- e8_10 %>%   select(ends_with("Change"))
col_name_e8_10_2 <- paste0(op_date_range_min, " - ", op_date_range_max, " % Change")
e8_10[[col_name_e8_10_2]] <- paste0(round(e8_10_2/pull(e8_10_1,1),2)*100, "%")


names(e8_10)[which(str_detect(names(e8_10), "\\d{4}"))[1:2]] <- paste0(c(op_date_range_min, op_date_range_max), " Jobs")
names(e8_10)[which(str_detect(names(e8_10), "Change"))]
e8_10_1 <- e8_10[,c(which(str_detect(names(e8_10), "Description")), which(str_detect(names(e8_10), "\\d{4}"))[1:2], which(str_detect(names(e8_10), "Change")),which(str_detect(names(e8_10), "Annual")))]
names(e8_10_1)[which(str_detect(names(e8_10_1), "Description"))] <- "Occupation"
names(e8_10_1)[which(str_detect(names(e8_10_1), "Annual"))] <- "Annual Openings"

e8_10_1[,2] <- round(e8_10_1[,2],0)
e8_10_1[,3] <- round(e8_10_1[,3],0)
e8_10_1[,6] <- round(e8_10_1[,6],0)

e8_10_total_row <- tibble(
  Occupation = "Total",
  min_jobs = sum(e8_10_1[,2]),
  max_jobs = sum(e8_10_1[,3]),
  change_jobs = 0,
  perc_change_jobs = 0,
  openings = sum(e8_10_1[,6])
)

e8_10_total_row <- e8_10_total_row %>%
  mutate(change_jobs = max_jobs-min_jobs,
         perc_change_jobs = paste0(round(100*change_jobs/min_jobs), "%"))

names(e8_10_total_row) <- names(e8_10_1)

e8_10_2 <- bind_rows(e8_10_1, e8_10_total_row)


# Create flextable with dynamic column logic
return(e8_10_2)
}

exhibit_8_10_flex_func <- function(e8_10_2) {
  col_change <- names(e8_10_2)[4]
  col_pct_change <- names(e8_10_2)[5]


  # Store original numeric values for color logic
  ._change_raw <- e8_10_2[[col_change]]
  ._pct_raw <- e8_10_2[[col_pct_change]]

  # Format the values (without altering raw columns)
  e8_10_2_2 <- format_with_parentheses(as.numeric(str_remove_all(e8_10_1[[col_change]], ",")))
  e8_10_2[[col_change]][1:length(e8_10_2_2)] <- e8_10_2_2
  e8_10_2_3 <- format_pct_with_parentheses(as.numeric(str_remove(e8_10_1[[col_pct_change]], "\\%")))
  e8_10_2[[col_pct_change]][1:length(e8_10_2_3)] <- e8_10_2_3

  as.numeric(._change_raw)
  as.numeric(str_remove(._pct_raw, "\\%"))

  p_ind1 <- which(str_detect(pull(e8_10_2, 5), "%"))
  p_ind2 <- which(!str_detect(pull(e8_10_2, 5), "%"))
  p_ind_good <- c(pull(e8_10_2, 5)[p_ind1], paste0(pull(e8_10_2, 5)[p_ind2], "%"))
  e8_10_2[,5] <- p_ind_good[sort(c(p_ind1, p_ind2))]
  e8_10_2[[col_change]] <- format_num_func(e8_10_1[[col_change]], "#")
  ._change_raw <- e8_10_2[[col_change]]
  ._pct_raw <- e8_10_2[[col_pct_change]]

e8_10_2_ft <- flextable(e8_10_2) %>%
  # Bold last row
  #bold(i = nrow(e8_10_1), bold = TRUE) %>%

  # Red color for negative values
  color(
    i = which(as.numeric(str_remove_all(._change_raw, ",")) < 0),
    j = col_change,
    color = "red"
  ) %>%
  color(
    i = which(as.numeric(str_remove(._pct_raw, "\\%")) < 0),
    j = col_pct_change,
    color = "red"
  ) %>%

  # Center align all content
  align(align = "center", part = "all") %>%

  # Set header labels with line breaks
  set_header_labels(.labels = setNames(
    c(gsub(" ", "\n", col_change, fixed = TRUE),
      gsub(" ", "\n", col_pct_change, fixed = TRUE)),
    c(col_change, col_pct_change)
  )) %>%

  # Style header
  fontsize(size = 12, part = "header") %>%
  font(fontname = "Segoe UI", part = "header") %>%
  bold(part = "header") %>%
  color(color = "white", part = "header") %>%
  bg(bg = table1_header_color, part = "header") %>%

  # Style body
  fontsize(size = 12, part = "body") %>%
  font(fontname = "Segoe UI", part = "body") %>%

  # Style footer (last row as footer proxy)
  bg(i = seq(ifelse(nrow(e8_10_2)==1, 1, 2), nrow(e8_10_2), 2), bg = table_banding_odd, part = "body") %>%
  bg(i = seq(1, nrow(e8_10_2), 2), bg = table_banding_even, part = "body") %>%
  fontsize(i = nrow(e8_10_2), size = 12, part = "body") %>%
  font(i = nrow(e8_10_2), fontname = "Segoe UI", part = "body") %>%
  bg(nrow(e8_10_2), bg = total_bar_color, part = "body") %>%
  bold(nrow(e8_10_2), part = "body") %>%
  border_remove() %>%
  border_inner_h(border = border_settings, part = "body") %>%
  hline_top(border = border_settings, part = "body") %>%
  hline_bottom(border = border_settings, part = "body") %>%

  # Autofit column widths
  autofit()

return(e8_10_2_ft)
}

#ca_job_growth <- f_job_growth_v3(ca_demand)
ca_job_growth <- f_job_growth(ca_demand)
cvml_job_growth <- f_job_growth(cvml_demand)


exhibit8 <- exhibit_8_10_func(f_job_growth(ca_demand))
exhibit10 <- exhibit_8_10_func(f_job_growth(cvml_demand))

exhibit8_ft <-  exhibit_8_10_flex_func(exhibit8)
exhibit10_ft <- exhibit_8_10_flex_func(exhibit10)

exhibit_doc_func(exhibit8_ft)
exhibit_doc_func(exhibit10_ft)

d1_num <- ca_job_growth %>%
  mutate(region = NULL) %>%
  filter(
    Year == as.numeric(op_date_range_min) |
    Year == as.numeric(op_date_range_max)
  )

growth_perc_func <- function(ca_or_cvml){

    d_num <- ca_or_cvml %>%
    mutate(region = NULL) %>%
    filter(
      Year == as.numeric(op_date_range_min) |
        Year == as.numeric(op_date_range_max)
    )
  output <- paste0(round((pull(d_num, Jobs_n)[2]-pull(d_num, Jobs_n)[1])/pull(d_num, Jobs_n)[1],2)*100, "%")
  return(output)
}

statewide_growth <- growth_perc_func(ca_job_growth)
cvml_growth <- growth_perc_func(cvml_job_growth)

d1_num_2 <- cvml_job_growth %>%
  mutate(region = NULL) %>%
  mutate(Year = as.numeric(Year)) %>%
  filter(between(Year,as.numeric(min_year), as.numeric(last_year)))

d1_num_2_2 <- cvml_job_growth %>%
  mutate(region = NULL) %>%
  filter(
    Year == as.numeric(op_date_range_min) |
      Year == as.numeric(op_date_range_max)
  )

d1_cvml_highest_growth_ind <- which.max(d1_num_2$perc_growth)
d1_cvml_highest_growth_perc <- paste0(round(pull(d1_num_2, perc_growth)[d1_cvml_highest_growth_ind]), "%")
d1_cvml_highest_growth_year <- pull(d1_num_2, Year)[d1_cvml_highest_growth_ind]

d2_ca_annual_openings <- prettyNum(round(pull(d1_num, Annual_Openings)[1]), big.mark = ",")
d2_cvml_annual_openings <- prettyNum(round(pull(d1_num_2_2, Annual_Openings)[1]), big.mark = ",")

--------------------------------------------------

--- SCRIPT: exhibit9_bdp.R ---


cvml_job_growth_v3 <- f_job_growth_v3(cvml_demand)
cvml_job_growth_v3$region <- "CVML"

ca_job_growth_v3 <- f_job_growth_v3(ca_demand)
ca_job_growth_v3$region <- "California"

demand_projections_v3 <- cvml_job_growth_v3 %>%  bind_rows(ca_job_growth_v3) #%>%  bind_rows(cvml_job_growth)
#min_year_ex9 <- year_set_func()-10

#min_year_9 <-
e9 <- demand_projections_v3 %>%
  mutate(Year = as.numeric(as.character(Year))) %>%  # Convert Year to numeric
  #filter(if (trig) !is.na(SOC) else is.na(SOC)) %>%
  filter(between(Year, year_set_func()-10, year_set_func())) %>%
  select(Year, perc_growth, region) %>%
  mutate(perc_growth = round(perc_growth, 1))

e9_1 <- e9 %>%
  mutate(perc_growth = round(perc_growth/100,2) #,
         #region = factor(region, levels = c("NCV/NML", "SCV/SML", "CA (All Occupations)"), ordered = T)
         ) %>%
  pivot_wider(names_from = Year,
              values_from = perc_growth) %>%
  arrange(region)

exhibit_excel_fix(e9_1, "9_Exhibit.xlsx")
exhibit_word_doc("9_Exhibit.xlsx", "Process9")


##### Document officeR_011regional_analysis_1_bdp.R
max_growth_perc_index <- which.max(cvml_job_growth_v3$perc_growth)

ex_9_max_growth_perc <- pull(cvml_job_growth_v3, "perc_growth")[max_growth_perc_index]
ex_9_max_growth_count <- round(pull(cvml_job_growth_v3, "Jobs_n")[max_growth_perc_index])
ex_9_max_growth_year <- pull(cvml_job_growth_v3, "Year")[max_growth_perc_index]

format_num_func(ex_9_max_growth_perc/100, "%", p=T)

--------------------------------------------------

--- SCRIPT: officeR_000summary_bdp.R ---


text_h0 <- paste0("Workforce Demand for ", general_field, " in the Central Valley/Mother Lode Region")

text_h0_1 <- paste0("Labor Market Supply and Demand for ", degree_title, " at ", pull(colleges_df[colleges_df$College==requesting_college,], FullName))

text_h0_3 <- "Prepared by:"
text_h0_4 <- "Central Valley/Mother Lode (CVML)"
text_h0_5 <- "Center of Excellence for Labor Market Research"

intro_func <- function(text, style, alignment) {
  return(fpar(ftext(text, style), fp_p = fp_par(text.align = alignment)))
}

title_text <- intro_func(text = text_h0, style = H0, alignment = "center")
subtitle_text <- intro_func(text = text_h0_1, style = H0_1, alignment = "center")
prepared_by1 <- intro_func(text_h0_3, H0_1,"right")
prepared_by2 <- intro_func(text_h0_4, H0_1,"right")
prepared_by3 <- intro_func(text_h0_5, H0_1,"right")


doc <- read_docx("bdp_intro_template.docx")

# Add content to the top of the document
doc <- doc %>%
  body_add_fpar(title_text) %>%
  body_add_par("") %>%
  body_add_par("") %>%
  body_add_fpar(subtitle_text) %>%
  body_add_par("") %>%
  body_add_par("") %>%
  body_add_par("") %>%
  body_add_par("") %>%
  cursor_end() %>%
  body_add_fpar(prepared_by3) %>%
  body_add_fpar(prepared_by2, pos = "before") %>%
  body_add_fpar(prepared_by1, pos = "before")

print(doc, target = "officeR_000summary_bdp.docx")

--------------------------------------------------

--- SCRIPT: officeR_001keyfindings_bdp.R ---



statewide_growth <- growth_perc_func(ca_job_growth)
cvml_growth <- growth_perc_func(cvml_job_growth)

# see exhibit8_bdp.R
d_b_1_2 <- paste0(
  is_or_are(),
  " projected to ",
  increase_or_decrease_func(statewide_growth),
  " by ",
  statewide_growth,
  " statewide through ",
  op_date_range_max,
  ". In the CVML region, employment in ",
  this_or_these(),
  " ",
  occupation_or_occupations(),
  " experienced the highest growth of ",
  d1_cvml_highest_growth_perc,
  " in ",
  d1_cvml_highest_growth_year,
  "."
)

d_b_1 <- fpar(
  ftext("Employment for ", prop = body_text_style),
  ftext(jobs, prop = body_text_style_italic),
  ftext(related_occupations_or_no(), prop = body_text_style_related_occupations),
  ftext(paste0(" ", related_occupations_helper("report"), " "), prop = body_text_style), # Space between jobs and is_or_are
  ftext(d_b_1_2, prop = body_text_style),
  fp_p = fp_par(text.align = "justify")
)

# see exhibit8_bdp.R
d_b_2_1 <- paste0(
  "Over the next ten years, California is projected to have approximately ",
  d2_ca_annual_openings,
  " annual job openings for ",
  this_or_these(),
  " ",
  occupation_or_occupations(),
  " with ",
  d2_cvml_annual_openings,
  " of those openings located in the CVML region."
)

d_b_2 <- fpar(
    ftext(d_b_2_1, prop = body_text_style),
    fp_p = fp_par(text.align = "justify")
  )


wage_compare <- function(display_difference_or_comparison=T, x=1){
compare  <- (entry_lev_wages - as.numeric(str_remove_all(cvml_living_wage_adult, "\\$"))) %>% as.character()
if(compare>0){
  word <- c("more", "above")
} else if (compare==0){
  word <- c("equal to", "equal to")
} else {
  word <- c("less", "below")
}
return_me <- ifelse(display_difference_or_comparison, compare, word[x])
return(return_me)
}



d_b_3_1 <- paste0(
 #reg_lw_count(cvml_living_wage_adult, all=T),
  " is ",
  wage_to_dollar(entry_lev_wages),
  " in the CVML region - ",
  wage_compare(F, x=1),
 " than ",
 wage_to_dollar(wage_compare(T)),
 " ",
 wage_compare(F, x=2),
 " the CVML region's living wage."
)



d_b_3 <-fpar(
  ftext("The entry-level hourly wage for ", prop = body_text_style),
  ftext(jobs, prop = body_text_style_italic),
  ftext(related_occupations_or_no(), prop = body_text_style_related_occupations),
  ftext(d_b_3_1, prop = body_text_style),fp_p = fp_par(text.align = "justify")
)

cvml_college_award_counter <- function(num=T, cvml = T, count=F){
  if(cvml) {
    region_pick <- ccc_supply_cvml
  } else {
    region_pick <- ex12_1
  }
  college_award_count <- length(unique(pull(region_pick, 1)))
  if(count) {
    final_answer <- sum(pull(region_pick, `3-Year Award Average`))
  } else {
  if(length(college_award_count)==0) {
    final_answer <- "no"
  } else if (num) {
    final_answer <- college_award_count
  } else {
    final_answer <- xfun::n2w(college_award_count)
  }
  }
  return(final_answer)
}


s_b_1_1 <- paste0(
  " there were ",
  cvml_college_award_counter(F, T),
  " educational providers in the region that conferred bachelor's degrees. However, institutions conferred ",
  cvml_college_award_counter(F, F, T),
  " post baccalaureate degrees in related programs."
)

s_b_1 <- fpar(
  ftext("Between ", prop = body_text_style),
  ftext(supply_years_min, prop = body_text_style),
  ftext(" and ", prop = body_text_style),
  ftext(supply_years_max, prop = body_text_style),
  ftext(s_b_1_1, prop = body_text_style)
  ,fp_p = fp_par(text.align = "justify")
)

cvml_annual_openings <- tail(pull(exhibit_10_func(f_job_growth(cvml_demand)), `Annual Openings`), 1)

g_b_1_1 <- paste0(
  "With no average annual bachelor's degrees issued in the region, ",
  cvml_college_award_counter(F, F, T),
  " post-baccalaureate degrees issued, and ",
  cvml_annual_openings,
  " projected annual job openings for "
)

cvml_supply_gap <- function(text=T){
  gap <- cvml_annual_openings-cvml_college_award_counter(F, F, T)
  if(text) {
  if(gap>0){
    final_offer <- "above"
  } else if (gap == 0) {
    final_offer <- "equal"
  } else if (gap <0 ){
    final_offer <- "below"
  }
  } else {
    final_offer <- gap
  }
  return(final_offer)
}

g_b_1_2 <- paste0(
  ", the potential supply gap is ",
  increase_or_decrease_func(cvml_annual_openings-cvml_college_award_counter(F, F, T),5),
  " the acceptable threshold by ",
  abs(cvml_supply_gap(F)),
  " jobs in the CVML region."
)

g_b_1 <- fpar(
  ftext(g_b_1_1, prop = body_text_style),
  ftext(jobs, prop = body_text_style_italic),
  ftext(related_occupations_or_no(), prop = body_text_style),
  ftext(g_b_1_2, prop = body_text_style),
  fp_p = fp_par(text.align = "justify")
)


g_b_2_1 <- paste0(
  "In addition to ",
  this_or_these(),
  " ",
  occupation_or_occupations(),
  " ",
  "having a typical entry-level education of",
  a_degree_fix(pull(ca_demand, `Typical Entry Level Education`), T,T),
  ", ",
  bachelor_range_f(bachelor_range, 2),
  " of incumbent workers have completed a bachelor's degree as their highest level of education."
)

g_b_2 <- fpar(
  ftext(g_b_2_1, prop = body_text_style),
  fp_p = fp_par(text.align = "justify")
)

#### CONSTRUCT DOCUMENT

doc1 <- read_docx("bdp_template.docx") %>%
  body_add_fpar(fpar(ftext(text_date, H0_1), fp_p = fp_par(text.align = "right"))) %>% # This line is where the error occurs
  body_add_par("", style = "Normal") %>%
  body_add_fpar(fpar(ftext("KEY FINDINGS", H1), fp_p = fp_par(text.align = "left"))) %>%
  body_add_fpar(fpar(ftext("Demand:", body_text_style_bold))) %>%
  body_add_fpar(d_b_1, style = "List Paragraph") %>%
  body_add_fpar(d_b_2, style = "List Paragraph") %>%
  body_add_fpar(d_b_3, style = "List Paragraph") %>%
  body_add_fpar(fpar(ftext("Supply:", body_text_style_bold))) %>%
  body_add_fpar(s_b_1, style = "List Paragraph") %>%
  body_add_fpar(fpar(ftext("Gap Analysis:", body_text_style_bold))) %>%
  body_add_fpar(g_b_1, style = "List Paragraph") %>%
  body_add_fpar(g_b_2, style = "List Paragraph")

# Save the document
print(doc1, target = "officeR_001keyfindings_bdp.docx")

--------------------------------------------------

--- SCRIPT: officeR_002introduction_bdp.R ---

fetch_soc_data <- function(soc_code) {
  base_url <- "https://services.onetcenter.org/ws/online/occupations/"
  username <- "coeccc_region_centra"
  password <- "8349uqy"

  endpoints <- list(
    summary = "summary",
    education = "summary/education",
    job_zone = "summary/job_zone"
  )

  results <- list()

  for (endpoint in names(endpoints)) {
    url <- paste0(base_url, soc_code, "/", endpoints[[endpoint]])
    response <- httr::GET(
      url = url,
      httr::authenticate(username, password, type = "basic")
    )
    if (response$status_code == 200) {
      results[[endpoint]] <- jsonlite::fromJSON(httr::content(response, "text", encoding = "UTF-8"), flatten = FALSE)
    } else {
      results[[endpoint]] <- list(error = TRUE, status_code = response$status_code, reason = response$reason)
    }
  }

  return(results)
}

#socsss <- c("17-2021", "19-1013", "17-3023")

#tester <- c("", "", "")
#digits <- socsss

digit_adder_onet <- function(digits) {

  length_digits <- length(digits)
  new_vec <- vector(mode="character", length = length_digits)
  for (i in seq_along(new_vec)){
    activate <- str_detect(digits[i], "\\.\\d{2}")
    if(!activate) {
      new_soc <- paste0(digits[i], ".00")
    } else {
      new_soc <- digits[i]
    }
    new_vec[i] <- new_soc
  }
  return(new_vec)
}

soc_codes_00 <- digit_adder_onet(SOC)
intro_description_and_job_titles <- vector(mode = "list", length(soc_codes_00))

for (soc_code in soc_codes_00) {
  ONET_call <- fetch_soc_data(soc_code)
  intro_description_and_job_titles[[soc_code]][["description"]] <- ONET_call$summary$occupation$description
  intro_description_and_job_titles[[soc_code]][["sample_titles"]] <- ONET_call$summary$occupation$sample_of_reported_job_titles
}

intro_pargraph_1 <- "The Applied Agricultural Science and Technology, , program proposed by Cerro Coso College is designed prepare students to integrate, install, operate, and maintain advanced technology systems in agricultural operations (e.g., food production, processing, and distribution businesses). Specific competencies include applications of IoT networks, precision agriculture, robotics, automation, and data analytics. Students learn to bridge traditional agricultural knowledge with emerging technology implementation, preparing them for careers as agricultural technology specialists, systems integrators, and field support technicians. The program emphasizes hands-on application, industry partnerships, and real-world problem-solving to meet the growing demand for technology-skilled professionals in California's agricultural sector. Graduates will be equipped to implement, troubleshoot, and optimize smart farming and agricultural industry systems that enhance productivity, sustainability, and profitability in diverse agricultural operations."
intro_pargraph_1 <- paste0(
  "The " ,
  general_field,
  ", ",
  degree_title,
  " Degree, program proposed by ",
  requesting_college,
  " is designed for students planning to become California licensed respiratory care practitioners and registered respiratory therapists. Completion of the requirements also allows students to apply for all state and national advanced specialty credentialing examinations. Students will acquire the skills to provide a wide range of high technology and high-touch therapeutic interventions to patients in acute and chronic care settings.  Competencies are assessed through the use of classroom, laboratory, and clinical performance evaluations in simulated and actual patient care situations. Program success is determined through examining  attrition rates, employment rates, and licensure exam pass rates.  The degree and certificate in respiratory care are awarded after successful completion of the advanced registry-level respiratory care program.

  ",
  pull(CIPCode2020[(CIPCode2020$CIPCode %in% CIP_pull),], CIPDefinition)
)

#CIP_pull <- CIP_string
#CIP_pull <- '01.0000'
#pull(CIPCode2020[(CIPCode2020$CIPCode %in% CIP_pull),], CIPTitle)
#pull(CIPCode2020[(CIPCode2020$CIPCode %in% CIP_pull),], CIPDefinition)



doc2 <- read_docx("bdp_template.docx") %>%
  body_add_fpar(fpar(ftext("Introduction", H1), fp_p = fp_par(text.align = "left"))) %>% # This line is where the error occurs
  body_add_par("", style = "Normal") %>%
  body_add_fpar(fpar(ftext(intro_pargraph_1, body_text_style), fp_p = fp_par(text.align = "justify"))) %>%
  body_add_par("", style = "Normal") %>%
  body_add_fpar(fpar(ftext("The key occupations that typically require a bachelor's degree are:", body_text_style), fp_p = fp_par(text.align = "left"))) %>%
body_add_par("", style = "Normal")

for (soc_code in SOC) {
  job_title <- paste0(soc_code_titles_w_soc_code, ": ")
  job_description <- fpar(
    ftext(job_title, body_text_style_bold),
    ftext(intro_description_and_job_titles[[digit_adder_onet(soc_code)]][["description"]], body_text_style),
    ftext(".", body_text_style),
    fp_p = fp_par(text.align = "justify")
  )
  sample_title <- fpar(
    ftext("Sample of reported job titles: ", body_text_style_bold),
    ftext(paste(intro_description_and_job_titles[[digit_adder_onet(soc_code)]][["sample_titles"]][["title"]],collapse = ", "), body_text_style),
    ftext(".", body_text_style),
    fp_p = fp_par(text.align = "justify")
  )

doc2 <- doc2 %>%
  body_add_fpar(job_description) %>%
  body_add_par("") %>%
  body_add_fpar(sample_title)

}

print(doc2, "officeR_002introduction.docx")

--------------------------------------------------

--- SCRIPT: officeR_003keyoccupations_bdp.R ---

#SOC_tester <- random_soc_gen_f(5)




purpose_paragraph_1 <- paste0(
  "The purpose of this study is to determine whether there is demand in the statewide and regional labor market for the ")
purpose_paragraph_2 <- paste0(
  " occupations that are not being met by the supply from relevant training programs. More specifically, this report addresses the labor market components of Assembly Bill 927, which require evidence of unmet workforce needs related to ",
  requesting_college,
  "’s proposed baccalaureate degree program. "
)

key_occupations_title <- paste0("Key ", general_field, " Occupations")

key_occupations_paragraph <- paste0(
  " occupations analyzed in this report were selected from the 2018 Standard Occupational Classification (SOC) system. These occupations are classified under ",
  soc_2digit_titles_func(soc_2digit_titles),
  " major occupational groups."
)



#doc3 <- read_docx("bdp_template.docx") %>%
doc3 <- read_docx() %>%
  body_add_fpar(
    fpar(
      ftext(purpose_paragraph_1, body_text_style),
      ftext(str_to_lower(general_field), body_text_style_italic),
      ftext(purpose_paragraph_2, body_text_style),
      fp_p = fp_par(text.align = "justify"))) %>%
  body_add_par("") %>%
  body_add_fpar(
    fpar(
      ftext(key_occupations_title, body_text_style_bold),
      fp_p = fp_par(text.align = "justify"))) %>%
  body_add_par("") %>%
  body_add_fpar(
    fpar(
      ftext("The key ", body_text_style),
      ftext(str_to_lower(general_field), body_text_style_italic),
      ftext(key_occupations_paragraph, body_text_style),
      fp_p = fp_par(text.align = "justify"))) %>%
  body_add_par("") %>%
  body_add_fpar(
    fpar(
      ftext("Exhibit 1: Key ", H3),
      ftext(jobs, H3),
      ftext(related_occupations_or_no(), H3_italicized),
      fp_p = fp_par(text.align = "center")
      )
    ) %>%
  body_add_flextable(exhibit1_ft)

print(doc3, "officeR_003keyoccupations.docx")

--------------------------------------------------

--- SCRIPT: officeR_004entryeducation_bdp.R ---

SOC_tester <- c("29-1231", "64-4504", "45-5434", "29-4564", "11-2456")


soc_code_titles_w_soc_code
soc_tester_titles_w_codes <- soc_2018_definitions %>%
  #filter(str_detect(`SOC Code`, pattern = "\\-0000")) %>%
  filter(`SOC Code` %in% soc_2018_definitions$`SOC Code`[round(runif(5, 0, length(soc_2018_definitions$`SOC Code`)))]) %>%
  mutate(SOC_2digit_titles = paste0(`SOC Title`, " (", `SOC Code`, ")")) %>%
  pull(SOC_2digit_titles)

soc_titles_w_codes_func <- function(soc_2digit_titles) {
  soc_2digit_titles_length <- length(soc_2digit_titles)
  if (soc_2digit_titles_length==1){
    final_offer <- soc_2digit_titles
  } else if (soc_2digit_titles_length==2) {
    final_offer <- paste0(soc_2digit_titles[1], " and ", soc_2digit_titles[2])
  } else if (soc_2digit_titles_length>2) {

    soc_2digit_titles_length_less_1 <- soc_2digit_titles_length-1
    all_but_last <- paste(soc_2digit_titles[1:soc_2digit_titles_length_less_1], collapse = ", ")
    final_offer <- paste0(all_but_last, ", and ", soc_2digit_titles[soc_2digit_titles_length])
  }
  return(final_offer)
}

soc_titles_w_codes_func <- function(soc_2digit_titles) {
  soc_2digit_titles_length <- length(soc_2digit_titles)
  if (soc_2digit_titles_length==1){
    final_offer <- ftext(soc_2digit_titles, body_text_style)
  } else if (soc_2digit_titles_length==2) {
    final_offer <-
      fpar(
      ftext(soc_2digit_titles[1], body_text_style_italic),
      ftext(" and ", body_text_style),
      ftext(soc_2digit_titles[2], body_text_style_italic)
      )

  } else if (soc_2digit_titles_length>2) {

    soc_2digit_titles_length_less_1 <- soc_2digit_titles_length-1
    all_but_last <- paste(soc_2digit_titles[1:soc_2digit_titles_length_less_1], collapse = ", ")

    final_offer <- paste0(all_but_last, ", and ", soc_2digit_titles[soc_2digit_titles_length])
  }
  return(final_offer)
}

# Function to format SOC titles with proper italics and separators
format_soc_titles <- function(soc_titles, addmore = F) {

  titles_length <- length(soc_titles)
  ftext_list <- list()

  if (titles_length == 1) {
    # Single title - just italicize it
    ftext_list <- list(ftext(soc_titles[1], body_text_style_italic))

  } else if (titles_length == 2) {
    # Two titles - "Title1 and Title2"
    ftext_list <- list(
      ftext(soc_titles[1], body_text_style_italic),
      ftext(" and ", body_text_style),
      ftext(soc_titles[2], body_text_style_italic)
    )

  } else {
    # Three or more titles - "Title1, Title2, and Title3"

    # Build list of ftext objects


    # Add all titles except the last one with commas
    for (i in 1:(titles_length - 1)) {
      ftext_list <- append(ftext_list, list(
        ftext(soc_titles[i], body_text_style_italic),
        ftext(", ", body_text_style)
      ))
    }

    # Add final "and" and last title
    ftext_list <- append(ftext_list, list(
      ftext("and ", body_text_style),
      ftext(soc_titles[titles_length], body_text_style_italic)
    ))
  }

  # Create fpar with all ftext objects
  if(addmore==F){
    final_offer <- do.call(fpar, ftext_list)
  } else {
    final_offer <-   ftext_list
  }
  return(final_offer)
}

soc_titles_formatted <- format_soc_titles(soc_code_titles_w_soc_code, addmore = T)

append(soc_titles_formatted, list (
))


#soc_titles_w_codes_func(soc_tester_titles_w_codes)
statewide_analysis_paragraph_0_1 <- paste0("This section presents a statewide overview of ",
                                           "the"
                                           #this_or_these()
                                           , " ", occupation_or_occupations(), ": ")
statewide_analysis_paragraph_0_2 <- " focusing on the following key areas: entry-level education requirements, desired licenses and certifications, work experience expectations, salary differentials by education level, and long-term job projections. "

statewide_analysis_paragraph_0 <- list(ftext("This section presents a statewide overview of the occupations: ", body_text_style)) %>%
  append(soc_titles_formatted) %>%
  append(
      list(
        ftext(statewide_analysis_paragraph_0_2, body_text_style),
        fp_p = fp_par(text.align = "justify")
          )
        )

statewide_analysis_paragraph <- do.call(fpar, statewide_analysis_paragraph_0)

summary_1_table_func <- function() {
  final_offer <- cvml_demand %>%
    rename(Demand = `Avg. Annual Openings`) %>%
    mutate(weight = round((Demand/sum(Demand))*100)) %>%
    select(SOC, Description, Demand, `Typical Entry Level Education`, weight) %>%
    left_join(
      exhibit2_4 %>%
        rename(Description = field), #%>%
      #  select(Description, `Bachelor's Degree`),
      by = c("Description")) %>%
    mutate(non_bach = 1-`Bachelor's Degree`)
  return(final_offer)
}


ed_att <- summary_1_table_func() %>%
  pivot_longer(
    cols = c(6:9),
    names_to = "grad_perc"
  ) %>%
  mutate(allocate = weight*value) %>%
  group_by(grad_perc) %>%
  summarize(
    most_grad = sum(allocate)
  ) %>%
  arrange(desc(most_grad)) %>%
  head(2)

bachelor_degrees <- pull(summary_1_table_func(), `Bachelor's Degree`)

if(length(bachelor_degrees)==1){
  bachelor_degrees_interval <- paste0(bachelor_degrees*100, "%")
} else {
  bachelor_degrees_interval <-  paste0(
    "between ",
    min(bachelor_degrees)*100,
    "% and ",
    max(bachelor_degrees)*100,
    "%"
    )

}

entry_level_education_requirements_paragraph <-
  paste0("The Bureau of Labor Statistics (BLS) lists",
         a_degree_fix(pull(ed_att, 1)[1], a = T, b = T), " and", a_degree_fix(pull(ed_att, 1)[2], a = T, b = T),
         " as the typical entry-level education for the occupations of interest. National-level educational attainment data indicates that ",
         bachelor_degrees_interval,
         " of incumbent workers in ",
         this_or_these(),
         " ",
         occupation_or_occupations(),
         " have completed a bachelor’s degree as their highest level of education.  Exhibit 2 shows the educational attainment for ",
         this_or_these(),
         " ",
         occupation_or_occupations(),
         "."
)




doc4 <- read_docx("bdp_template.docx") %>%
  body_add_fpar(fpar(ftext("Statewide Analysis", H1), fp_p = fp_par(text.align = "left"))) %>%
  body_add_par("") %>%
  body_add_fpar(statewide_analysis_paragraph) %>%
  body_add_par("") %>%
  body_add_fpar(fpar(ftext("Entry-Level Education Requirements", H2), fp_p = fp_par(text.align = "justify"))) %>%
  body_add_par("") %>%
  body_add_fpar(fpar(ftext(entry_level_education_requirements_paragraph, body_text_style), fp_p = fp_par(text.align = "justify"))) %>%
  body_add_par("") %>%
  body_add_fpar(
    fpar(
      ftext("Exhibit 2 National-level Educational Attainment for Occupation", H3),
      fp_p = fp_par(text.align = "center")
    )
  ) %>%
  body_add_docx("ex2_linked.docx")

print(doc4, "officeR_004entryeducation.docx")

--------------------------------------------------

--- SCRIPT: officeR_005jobpostings_ed_bdp.R ---


unique_postings_formatted <- prettyNum(unique_postings, big.mark = ",")
jb_all_bach <- paste0(round(jb_bachelor/jb_all,2)*100, "%")
jb_all_formatted <- prettyNum(jb_all, big.mark = ",")
jb_bachelor_formatted <- prettyNum(jb_bachelor, big.mark = ",")

job_postings_paragraph1 <- paste0("While there were ",
         unique_postings_formatted,
         " online job postings for ")

         #"Agricultural Engineers, Electrical and Electronic Engineering Technologists and Technicians, Engineering Technologists and Technicians, Except Drafters, All Other, Soil and Plant Scientists and Agricultural Technicians",
job_postings_paragraph2 <- paste0(" over the last 12 months, ",
         jb_all_formatted,
         " of those postings were specifically related to the target positions aligned with the proposed baccalaureate degree program. These figures account for postings made publicly available; internal recruitment efforts and postings cannot be identified for analysis."
  )


job_postings_paragraph3 <- paste0(
  "Of the ",
  jb_all_formatted,
  " postings listing a minimum education requirement (nb=",
  jb_all_formatted,
  "), ",
  jb_all_bach,
  " (",
  jb_bachelor_formatted,
  ") ",
  "requested a bachelor’s degree. Exhibit 3 shows the requested level of education by number of online job postings."
)


soc_titles_formatted <- format_soc_titles(soc_code_titles, addmore = T)

job_postings_paragraph0 <- list(
  ftext(job_postings_paragraph1, body_text_style)) %>%
  append(soc_titles_formatted) %>%
  append(
    list(ftext(job_postings_paragraph2, body_text_style), fp_p = fp_par(text.align = "justify"))
  )

job_postings_paragraph00 <- do.call(fpar, job_postings_paragraph0)

doc5 <- read_docx("bdp_template.docx") %>%
  body_add_par("") %>%
  body_add_fpar(job_postings_paragraph00) %>%
  body_add_par("") %>%
  body_add_fpar(fpar(ftext(job_postings_paragraph3, body_text_style), fp_p = fp_par(text.align = "justify"))) %>%
  body_add_par("") %>%
  body_add_fpar(
    fpar(
      ftext(paste0("Exhibit 3: Requested Education by Number of Job Postings in California (nb="), H3),
      fp_p = fp_par(text.align = "center")
    )
  ) %>%
  body_add_flextable(e_3_ft)

print(doc5, "officeR_005jobpostings_ed.docx")

--------------------------------------------------

--- SCRIPT: officeR_006jobpostings_LCC_bdp.R ---

job_postings_paragraph3 <- paste0(
  "Of the ",
  jb_all_formatted,
  " online job postings, the most requested credentials were a ",
  lcc_title[1],
  " (",
  lcc_perc[1],
  "), and ",
  lcc_title[2],
  " (",
  lcc_perc[2],
  ")",
  ". Exhibit 4 shows the most requested qualifications, sorted by number of online job postings. "
)

doc6 <- read_docx("bdp_template.docx") %>%
  body_add_fpar(fpar(ftext("Licenses, Clearances, and Certifications", H2), fp_p = fp_par(text.align = "left"))) %>%
  body_add_par("") %>%
  body_add_fpar(fpar(ftext(job_postings_paragraph3, body_text_style), fp_p = fp_par(text.align = "justify"))) %>%
  body_add_par("") %>%

  #  body_add_fpar(fpar(ftext("Entry-Level Education Requirements", H1), fp_p = fp_par(text.align = "justify"))) %>%
  #  body_add_par("") %>%
  #  body_add_fpar(fpar(ftext(entry_level_education_requirements_paragraph, body_text_style), fp_p = fp_par(text.align = "justify"))) %>%
  #  body_add_par("") %>%
  body_add_fpar(
    fpar(
      ftext(paste0("Exhibit 4: Top Licenses, Clearances, or Certifications by Number of Job Postings in California (nb=",jb_all_formatted,")"), H3),
      fp_p = fp_par(text.align = "center")
    )
  ) %>%
  body_add_flextable(e_4_ft)

print(doc6, "officeR_006jobpostings_LCC.docx")

--------------------------------------------------

--- SCRIPT: officeR_007jobpostings_workexp_bdp.R ---

#SOC_tester <- random_soc_gen_f(5)


test <- test_demand_data(random_soc_gen_f(20))

typical_entry_level_is_bachelors_func <- function(data){
  typical_entry_level_is_bachelors_index <- which(str_detect(pull(data,which(str_detect(names(data), "Typical Entry Level Education"))), "Bachelor"))
  typical_entry_level_is_bachelors <- pull(data,2)[typical_entry_level_is_bachelors_index]
  if(length(typical_entry_level_is_bachelors)==0) {
    typical_entry_level_is_bachelors <- "no jobs with bachelors"
  }
  return(typical_entry_level_is_bachelors)
}

typical_entry_level_is_bachelors <- typical_entry_level_is_bachelors_func(ca_demand)
soc_2digit_titles_func(typical_entry_level_is_bachelors)


typical_entry_level_work_experience_for_all
ex5_v2_bp <- exhibit_5_narrative_func(jp_min_exp_required)
typical_entry_level_work_experience_for_bachelor_preferance <- c(pull(ex5_v2_bp, 4)[1], pull(ex5_v2_bp, 1)[1])
typical_entry_level_work_experience_for_bachelor_preferance_followed_by <- c(pull(ex5_v2_bp, 4)[2], pull(ex5_v2_bp, 1)[2])


typical_entry_level_work_experience_for_all <- ifelse(typical_entry_level_work_experience_for_all == " no years ", paste0(typical_entry_level_work_experience_for_all, ' - "none" -'), typical_entry_level_work_experience_for_all)
job_postings_paragraph4 <- paste0(
  "The Bureau of Labor Statistics (BLS) lists",
  typical_entry_level_work_experience_for_all,
  " as the typical entry-level work experience for ",
  jobs,
  related_occupations_or_no(),
  ". However, of the postings for these occupations with program-aligned job titles that listed a minimum experience requirement, ",
  typical_entry_level_work_experience_for_bachelor_preferance[1],
  " requested ",
  typical_entry_level_work_experience_for_bachelor_preferance[2],
  " of experience, followed by ",
  typical_entry_level_work_experience_for_bachelor_preferance_followed_by[1],
  " of postings that requested ",
  typical_entry_level_work_experience_for_bachelor_preferance_followed_by[2],
  " of experience. "
)

job_postings_paragraph4 <- list(
  ftext(
    paste0(
  "The Bureau of Labor Statistics (BLS) lists",
  typical_entry_level_work_experience_for_all,
  "as the typical entry-level work experience for "
          ), body_text_style),
  ftext(jobs, body_text_style_italic),
  ftext(related_occupations_or_no(), body_text_style),
  ftext(
    paste0(
  ". However, of the postings for these occupations with program-aligned job titles that listed a minimum experience requirement, ",
  typical_entry_level_work_experience_for_bachelor_preferance[1],
  " requested ",
  typical_entry_level_work_experience_for_bachelor_preferance[2],
  " of experience, followed by ",
  typical_entry_level_work_experience_for_bachelor_preferance_followed_by[1],
  "of postings that requested ",
  typical_entry_level_work_experience_for_bachelor_preferance_followed_by[2],
  " of experience. "
          ), body_text_style),
  fp_p = fp_par(text.align = "justify")
  )

job_postings_paragraph4_fp <- do.call(fpar, job_postings_paragraph4)
job_postings_paragraph5 <- "Exhibit 5 shows the requested years of experience by number of online job postings for this occupation with program-aligned job titles. "


degree_alignment_paragraph <-
  paste0(
    "The proposed program aligns with the educational requirements for the target positions, as ",
    increase_or_decrease_func(perc_req_bach-.5,a=3),
    " than half ",
    format_perc_func(perc_req_bach, T),
    " of relevant online job postings with minimum education requirements require a bachelor’s degree. Additionally, the BLS lists a bachelor’s degree as the typical entry-level education for ",
    soc_2digit_titles_func(typical_entry_level_is_bachelors),
    " and ",
    bachelor_range_f(bachelor_range, 2),
    " of incumbent workers attained a baccalaureate degree as their highest level of education. "
  )

degree_alignment_paragraph_01 <-
  paste0(
    "The proposed program aligns with the educational requirements for the target positions, as ",
    increase_or_decrease_func(perc_req_bach-.5,a=3),
    " than half ",
    format_perc_func(perc_req_bach, T),
    " of relevant online job postings with minimum education requirements require a bachelor’s degree. Additionally, the BLS lists a bachelor’s degree as the typical entry-level education for ")

degree_alignment_paragraph_02 <- paste0(
    " and ",
    bachelor_range_f(bachelor_range, 2),
    " of incumbent workers attained a baccalaureate degree as their highest level of education. "
  )



degree_alignment_paragraph_00 <- list(ftext(degree_alignment_paragraph_01, body_text_style)) %>%
  append(format_soc_titles(typical_entry_level_is_bachelors, T)) %>%
  append(list(ftext(degree_alignment_paragraph_02, body_text_style),
              fp_p = fp_par(text.align = "justify")))

degree_alignment_paragraph_000 <- do.call(fpar, degree_alignment_paragraph_00)

doc7 <- read_docx("bdp_template.docx") %>%
  body_add_fpar(fpar(ftext("Entry-Level Work Experience", H2), fp_p = fp_par(text.align = "left"))) %>%
  body_add_par("") %>%
  body_add_fpar(job_postings_paragraph4_fp) %>%
  body_add_par("") %>%
  body_add_fpar(fpar(ftext(job_postings_paragraph5, body_text_style), fp_p = fp_par(text.align = "justify"))) %>%
  body_add_par("") %>%
  body_add_fpar(
    fpar(
      ftext(paste0("Exhibit 5: Requested Years of Experience by Number of Job Postings in California (nb=", jb_bachelor, ")"), H3),
      fp_p = fp_par(text.align = "center")
    )
  ) %>%
  body_add_flextable(e_5_ft) %>%
  body_add_par("") %>%
  body_add_fpar(fpar(ftext("Degree Alignment", H2), fp_p = fp_par(text.align = "left"))) %>%
  body_add_par("") %>%
  body_add_fpar(degree_alignment_paragraph_000) %>%
  body_add_par("")




print(doc7, "officeR_007jobpostings_workexp.docx")

--------------------------------------------------

--- SCRIPT: officeR_008advertised_salary_bdp.R ---


salary_differentials_paragraph <- paste0(
  "In the online job postings with a stated minimum educational requirement and an advertised salary ",
  "(ned=",
  format_num_func(jp_ned, "#", p = ),
  "),  employers for ",
  soc_2digit_titles_func(soc_code_titles_string),
  " advertised ",
  format_num_func(b_a_difference, "$W"),
  "/hour",
  increase_or_decrease_func(b_a_difference,3),
  " in entry-level wages for bachelor’s degree holders relative to their associate degree counterparts. ")

salary_differentials_paragraph_01 <- paste0(
  "In the online job postings with a stated minimum educational requirement and an advertised salary ",
  "(ned=",
  format_num_func(jp_ned, "#", p = ),
  "), employers for ")

salary_differentials_paragraph_02 <- paste0(
  " advertised ",
  format_num_func(b_a_difference, "$W"),
  "/hour ",
  increase_or_decrease_func(b_a_difference,3),
  " in entry-level wages for bachelor’s degree holders relative to their associate degree counterparts. ")

salary_differentials_paragraph_00 <- format_paragraph(salary_differentials_paragraph_01, salary_differentials_paragraph_02)

doc8 <- read_docx("bdp_template.docx") %>%
  body_add_fpar(fpar(ftext("Salary Differentials by Level of Education", H2), fp_p = fp_par(text.align = "left"))) %>%
  body_add_par("") %>%
  body_add_fpar(salary_differentials_paragraph_00) %>%
  body_add_par("") %>%
  body_add_fpar(fpar(ftext("Exhibit 6 lists the advertised entry-level wage for the occupation of interest by level of education.", body_text_style), fp_p = fp_par(text.align = "justify"))) %>%
  body_add_par("") %>%
  body_add_fpar(
    fpar(
      ftext(paste0("Exhibit 6: Advertised Entry-Level Wage by Level of Experience (ned=",format_num_func(jp_ned, "#"),")"), H3),
      fp_p = fp_par(text.align = "center")
    )
  ) %>%
  body_add_flextable(exhibit6_ft)

print(doc8, "officeR_008advertised_salary.docx")



--------------------------------------------------

--- SCRIPT: officeR_009occupational_projections_bdp.R ---

ex10_growth <-(pull(exhibit_7, which(names(exhibit_7)==op_date_range_max))-pull(exhibit_7, which(names(exhibit_7)==op_date_range_min)))/pull(exhibit_7, which(names(exhibit_7)==op_date_range_min))

occupational_projections_paragraph1 <- paste0(
  "Exhibit 7 shows the cumulative number of jobs for ",
  soc_2digit_titles_func(soc_code_titles),
  ", from ",
  op_date_range_min,
  " through ",
  op_date_range_max,
  ". There were ",
  format_num_func(pull(exhibit_7, which(names(exhibit_7)==op_date_range_min)), "#"),
  " jobs for this occupation in ",
  op_date_range_min,
  ". Employment is projected to ",
  increase_or_decrease_func(ex10_growth, 1),
  " ",
  format_num_func(ex10_growth, "%"),
  " through ",
  op_date_range_max,
  ". ")

occupational_projections_paragraph_001 <- paste0(
  "Exhibit 7 shows the cumulative number of jobs for ")
#  soc_2digit_titles_func(soc_code_titles),

occupational_projections_paragraph_002 <- paste0(
  ", from ",
  op_date_range_min,
  " through ",
  op_date_range_max,
  ". There were ",
  format_num_func(pull(exhibit_7, which(names(exhibit_7)==op_date_range_min)), "#"),
  " jobs for this occupation in ",
  op_date_range_min,
  ". Employment is projected to ",
  increase_or_decrease_func(ex10_growth, 1),
  " ",
  format_num_func(ex10_growth, "%"),
  " through ",
  op_date_range_max,
  ". ")

occupational_projections_paragraph_00 <- format_paragraph(occupational_projections_paragraph_001, occupational_projections_paragraph_002)

doc9 <- read_docx("bdp_template.docx") %>%
  body_add_fpar(fpar(ftext("10-Year Occupational Projections", H2), fp_p = fp_par(text.align = "left"))) %>%
  body_add_par("") %>%
  body_add_fpar(occupational_projections_paragraph_00) %>%
  body_add_par("") %>%
  body_add_fpar(
    fpar(
      ftext(paste0("Exhibit 7: Projected Number of Jobs for ",
      jobs, related_occupations_or_no()," by Year, ", year_set_func(), "-", year_set_func()+10), H3),
      fp_p = fp_par(text.align = "center")
    )
  ) %>%
  body_add_docx("ex7_linked.docx")

print(doc9, "officeR_009occupationalprojections1.docx")





--------------------------------------------------

--- SCRIPT: officeR_010occupationalprojections2_bdp.R ---

#soc_code_tester <- random_soc_gen_f(6)
#soc_code_title_tester <- soc_titles_f(soc_code_tester)

occupational_projections_paragraph3 <- paste0(
  "Exhibit 8 shows the ten-year occupational demand projections for ",
  jobs,
  related_occupations_or_no(),
  #soc_titles_w_codes_func(soc_code_title_tester),
  " throughout California. The number of jobs related to ",
  this_or_these(),
  " ",
  occupation_or_occupations(),
  " is projected to ",
  increase_or_decrease_func(ex10_growth, 1),
  " by ",
  format_num_func(ex10_growth, "%"),
  " through ",
  op_date_range_max,
  ", with ",
  format_num_func(last(pull(exhibit8, which(str_detect(names(exhibit8), "Annual|Openings")))), "#"),
  " job openings available annually, throughout the state. ")

occupational_projections_paragraph3_01 <- paste0(
  "Exhibit 8 shows the ten-year occupational demand projections for ")


occupational_projections_paragraph3_02 <- paste0(
  related_occupations_or_no(),
  #soc_titles_w_codes_func(soc_code_title_tester),
  " throughout California. The number of jobs related to ",
  this_or_these(),
  " ",
  occupation_or_occupations(),
  " is projected to ",
  increase_or_decrease_func(ex10_growth, 1),
  " by ",
  format_num_func(ex10_growth, "%"),
  " through ",
  op_date_range_max,
  ", with ",
  format_num_func(last(pull(exhibit8, which(str_detect(names(exhibit8), "Annual|Openings")))), "#"),
  " job openings available annually, throughout the state. ")

occupational_projections_paragraph3_03 <- format_paragraph(occupational_projections_paragraph3_01, occupational_projections_paragraph3_02)

doc10 <- read_docx("bdp_template.docx") %>%
  body_add_par("") %>%
  body_add_fpar(occupational_projections_paragraph3_03) %>%
  body_add_par("") %>%
  body_add_fpar(
    fpar(
      ftext("Exhibit 8: 10-Year Occupational Demand in California", H3),
      fp_p = fp_par(text.align = "center")
    )
  ) %>%
  body_add_flextable(exhibit8_ft)

print(doc10, "officeR_010occupationalprojections2.docx")

--------------------------------------------------

--- SCRIPT: officeR_011regional_analysis_1_bdp.R ---

regional_analysis_paragraph_1 <- "To gain a deeper understanding of labor market trends for this occupation, this section delves into Central Valley/Mother Lode regional data, examining historical employment trends and demand, educational supply, and wages for the occupation of interest. Due to extensive workforce migration between the 15 counties that make up the CVML region, this analysis examines them together to provide a comprehensive regional view of labor market trends, in line with standard practice that recognizes the counties’ integrated workforce and economic dynamics. "

regional_analysis_paragraph_2 <- paste0(
  "Exhibit 9 shows the historical, annual percent change in jobs for ",
  jobs,
  related_occupations_or_no(),
  " from ",
  year_set_func()-10,
  " through ",
  year_set_func(),
  ". Employment in these occupations ",
  "remained positive throughout this period",
  " with the highest growth in ",
  ex_9_max_growth_year,
  " ",
  format_num_func(ex_9_max_growth_perc/100, "%", p=T),
  ". ")

regional_analysis_paragraph_2_00 <- paste0("Exhibit 9 shows the historical, annual percent change in jobs for ")

regional_analysis_paragraph_2_01 <- paste0(
  " from ",
  year_set_func()-10,
  " through ",
  year_set_func(),
  ". Employment in these occupations ",
  "remained positive throughout this period",
  " with the highest growth in ",
  ex_9_max_growth_year,
  " ",
  format_num_func(ex_9_max_growth_perc/100, "%", p=T),
  ". ")

regional_analysis_paragraph_2_02 <- format_paragraph(regional_analysis_paragraph_2_00, regional_analysis_paragraph_2_01)

doc11 <- read_docx("bdp_template.docx") %>%
  body_add_par("") %>%
  body_add_par("") %>%
  body_add_fpar(fpar(ftext("Regional Analysis", H1), fp_p = fp_par(text.align = "left"))) %>%
  body_add_par("") %>%
  body_add_fpar(fpar(ftext(regional_analysis_paragraph_1, body_text_style), fp_p = fp_par(text.align = "justify"))) %>%
  body_add_par("") %>%
  body_add_fpar(fpar(ftext("Occupational Overview in the CVML Region", H2), fp_p = fp_par(text.align = "left"))) %>%
  body_add_par("") %>%
  body_add_fpar(regional_analysis_paragraph_2_02) %>%
  body_add_par("") %>%
  body_add_fpar(
    fpar(
      ftext("Exhibit 9: 10-Year Historical Annual Percent Change in Jobs for ", H3),
      ftext(jobs, H3),
      ftext(related_occupations_or_no(), H3_italicized),
      fp_p = fp_par(text.align = "center"))
    ) %>%
  body_add_docx("ex9_linked.docx")

print(doc11, "officeR_011regional_analysis_1.docx")

--------------------------------------------------

--- SCRIPT: officeR_012regional_analysis_2_bdp.R ---

regional_analysis_paragraph_3 <- paste0(
  "Exhibit 10 shows the ten-year occupational demand projection for ",
  jobs,
  related_occupations_or_no(),
  " in the CVML region. The number of jobs related to these occupations is projected to ",
  increase_or_decrease_func(ex10_growth, 1),
  " ",
  format_num_func(ex10_growth, "%"),
  " through ",
  year_set_func()+10,
  ", with ",
  format_num_func(last(pull(exhibit10, which(str_detect(names(exhibit10), "Annual|Openings")))), "#"),
  " job openings available annually. ")

regional_analysis_paragraph_3_00 <- paste0(
  "Exhibit 10 shows the ten-year occupational demand projection for ")


regional_analysis_paragraph_3_01 <- paste0(
  " in the CVML region. The number of jobs related to these occupations is projected to ",
  increase_or_decrease_func(ex10_growth, 1),
  " ",
  format_num_func(ex10_growth, "%"),
  " through ",
  year_set_func()+10,
  ", with ",
  format_num_func(last(pull(exhibit10, which(str_detect(names(exhibit10), "Annual|Openings")))), "#"),
  " job openings available annually. ")

regional_analysis_paragraph_3_02 <- format_paragraph(regional_analysis_paragraph_3_00, regional_analysis_paragraph_3_01)

doc12 <- read_docx("bdp_template.docx") %>%
  body_add_fpar(regional_analysis_paragraph_3_02) %>%
  body_add_par("") %>%
  body_add_fpar(
    fpar(
      ftext("Exhibit 10: Occupational Demand in CVML region1", H3),
      fp_p = fp_par(text.align = "center"))
  ) %>%
  body_add_flextable(exhibit10_ft)

print(doc12, "officeR_012regional_analysis_2.docx")

--------------------------------------------------

--- SCRIPT: officeR_013educational_supply_bdp.R ---

educational_supply_paragraph_1 <- paste0(
  "Community colleges throughout the state offer applied ",
  str_to_lower(general_field),
  " programs. These programs are often created under ",
  pull(topdf, 2)[1],
  " (TOP ",
  pull(topdf, 1)[1],
  ") ",
  #"Agriculture Technology and Sciences, General (TOP 0101.00)",
  ". However, none provide baccalaureate degrees. Therefore, educational supply is based on non-community college awards. "
  )
educational_supply_paragraph_2 <- paste0(
  "Exhibit 11 shows the Classification of Instructional Programs (CIP) codes aligned with program needs and related to ",
  jobs,
  related_occupations_or_no(),
  ", as well as the number of non-community college awards conferred in each CIP code. "
  )

educational_supply_paragraph_2_00 <- paste0(
  "Exhibit 11 shows the Classification of Instructional Programs (CIP) codes aligned with program needs and related to ")
educational_supply_paragraph_2_01 <- paste0(
  ", as well as the number of non-community college awards conferred in each CIP code. ")

educational_supply_paragraph_2_02 <- format_paragraph(educational_supply_paragraph_2_00, educational_supply_paragraph_2_01)

doc13 <- read_docx("bdp_template.docx") %>%
  body_add_fpar(fpar(ftext("Educational Supply", H2), fp_p = fp_par(text.align = "left"))) %>%
  body_add_fpar(fpar(ftext(educational_supply_paragraph_1, body_text_style), fp_p = fp_par(text.align = "justify"))) %>%
  body_add_par("") %>%
  body_add_fpar(educational_supply_paragraph_2_02) %>%
  body_add_par("") %>%

  body_add_fpar(
    fpar(
      ftext("Exhibit 11: Related Classification of Instructional Program (CIP) Code", H3),
      fp_p = fp_par(text.align = "center"))
  ) %>%
  body_add_flextable(exhibit11_ft)

print(doc13, "officeR_013educational_supply.docx")


--------------------------------------------------

--- SCRIPT: officeR_014educational_supply_2_bdp.R ---

educational_supply_paragraph_3 <- paste0(
  "Exhibit 12 shows the annual and three-year average number of awards conferred by non-community college institutions in the related CIP codes in the CVML region. Between ",
  supply_years_min,
  " and ",
  supply_years_max,
  ", non-community college institutions throughout the region conferred an average of ",
  format_num_func(last(pull(top_part_table, ncol(top_part_table))), "#"),
  " baccalaureate awards annually in related training programs. "
)


doc14 <- read_docx("bdp_template.docx") %>%
  body_add_fpar(fpar(ftext(educational_supply_paragraph_3, body_text_style), fp_p = fp_par(text.align = "justify"))) %>%
  body_add_par("") %>%
  body_add_fpar(
    fpar(
      ftext(
        paste0("Exhibit 12: Regional Non-Community College Awards, ", supply_years_min, "-", supply_years_max), H3),
      fp_p = fp_par(text.align = "center"))
  ) %>%
  body_add_flextable(exhibit12_ft)

print(doc14, "officeR_014educational_supply_2.docx")


--------------------------------------------------

--- SCRIPT: officeR_015wages_bdp.R ---

wages_paragraph_1 <- paste0(
  "This report considers the entry-level hourly wages for ",
  jobs,
  related_occupations_or_no(),
  " as they relate to the region’s living wage. These figures represent the high and low range of regional living wages. Entry-level hourly earnings are represented by the 25th percentile, which indicates 25% of workers in that occupation earn less than that amount while 75% earn more. "
)

wages_paragraph_2 <- paste0(
  "Entry-level hourly wages for ",
  reg_lw_count(cvml_living_wage_adult_infant, number=F, all=T),
  " ",
  jobs,
  related_occupations_or_no(),

  #"Electrical and Electronic Engineering Technologists and Technicians, Engineering Technologists and Technicians, Except Drafters, All Other, Soil and Plant Scientists and Agricultural Technicians",
  " are all above the CVML region’s living wage for one adult ($16.48)",
  #but ",
  #"Soil and Plant Scientists and Agricultural Technicians",
  " are below the living wage for one adult with one infant-aged child ($33.49). Exhibit 13 shows the wage range for ",
  this_or_these(), " ",
  occupation_or_occupations(),
  " in the CVML region and its comparison to the region’s living wages. "
  #"Note: there is insufficient data for Agricultural Engineers."
  )

wages_paragraph_2_00 <- paste0(
  "Entry-level hourly wages for ",
  reg_lw_count(cvml_living_wage_adult_infant, number=F, all=T),
  " ")


  #"Electrical and Electronic Engineering Technologists and Technicians, Engineering Technologists and Technicians, Except Drafters, All Other, Soil and Plant Scientists and Agricultural Technicians",
wages_paragraph_2_01 <- paste0(
  " are all above the CVML region’s living wage for one adult ($16.48)",
  #but ",
  #"Soil and Plant Scientists and Agricultural Technicians",
  " are below the living wage for one adult with one infant-aged child ($33.49). Exhibit 13 shows the wage range for ",
  this_or_these(), " ",
  occupation_or_occupations(),
  " in the CVML region and its comparison to the region’s living wages. "
  #"Note: there is insufficient data for Agricultural Engineers."
)


wages_paragraph_1_00 <- format_paragraph("This report considers the entry-level hourly wages for ",
                 " as they relate to the region’s living wage. These figures represent the high and low range of regional living wages. Entry-level hourly earnings are represented by the 25th percentile, which indicates 25% of workers in that occupation earn less than that amount while 75% earn more. ")


wages_paragraph_2_02 <- format_paragraph(wages_paragraph_2_00,
                                         wages_paragraph_2_01)

doc15 <- read_docx("bdp_template.docx") %>%
  body_add_fpar(fpar(ftext("Wages", H2), fp_p = fp_par(text.align = "left"))) %>%
  body_add_par("") %>%
  body_add_fpar(wages_paragraph_1_00) %>%
  body_add_par("") %>%
  body_add_fpar(fpar(ftext("CVML Wages", H2), fp_p = fp_par(text.align = "left"))) %>%
  body_add_par("") %>%
  body_add_fpar(wages_paragraph_2_02) %>%
  body_add_par("") %>%
  body_add_fpar(
    fpar(
      ftext("Exhibit 13: Wages by Occupation in CVML ", H3),
      ftext(jobs, H3),
      ftext(related_occupations_or_no(), H3_italicized),
      fp_p = fp_par(text.align = "center"))
  ) %>%
  body_add_docx("ex13_linked.docx")

print(doc15, "officeR_015wages.docx")

--------------------------------------------------


